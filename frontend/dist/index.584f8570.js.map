{"mappings":"A,S,E,C,E,O,G,E,U,C,E,O,C,C,CEIA,MAAM,EAAS,CAEb,W,+DAKA,QAA4C,QAG5C,SAAU,CACR,MAdkB,CAAA,CAepB,CACF,EAGA,OAAO,MAAM,CAAC,G,I,E,C,ECZP,SAAS,EAAc,CAAK,SACjC,AAAK,EACE,AAAA,AAAA,EAAA,GAAU,QAAQ,CAAC,EAAO,CAAE,aAAc,EAAE,CAAE,aAAc,EAAE,AAAC,GAAG,IAAI,GAD1D,EAErB,CAOO,SAAS,EAAa,CAAI,SAC/B,AAAK,EACE,AAAA,AAAA,EAAA,GAAU,QAAQ,CAAC,EAAM,CAC9B,aAAc,CAAC,IAAK,KAAM,IAAK,IAAK,KAAM,SAAU,IAAK,KAAM,KAAM,KAAK,CAC1E,aAAc,EAAE,AAClB,GAJkB,EAKpB,CAOO,SAAS,EAAU,CAAO,CAAE,EAAY,iBAAiB,EAC9D,IAAM,EAAe,SAAS,cAAc,CAAC,GACzC,GACF,EAAa,WAAW,CAAG,EAAc,GACzC,EAAa,SAAS,CAAC,MAAM,CAAC,UAG9B,WAAW,KACT,EAAa,SAAS,CAAC,GAAG,CAAC,SAC7B,EAAG,MAEH,QAAQ,KAAK,CAAC,SAAU,EAE5B,CAOO,SAAS,EAAa,CAAQ,EAEnC,IAAM,EAAS,EAAS,GAAG,CAAC,WAC5B,GAAI,CAAC,GAAU,AAAgB,IAAhB,EAAO,IAAI,CACxB,MAAO,CAAE,QAAS,CAAA,EAAO,aAAc,mCAAoC,EAI7E,IAAM,EAAc,EAAS,GAAG,CAAC,iBAC3B,EAAe,EAAS,GAAG,CAAC,yBAElC,AAAK,AAAC,GAAe,AAAuB,KAAvB,EAAY,IAAI,IAAe,AAAC,GAAgB,AAAsB,IAAtB,EAAa,IAAI,CAI/E,CAAE,QAAS,CAAA,EAAM,aAAc,EAAG,EAHhC,CAAE,QAAS,CAAA,EAAO,aAAc,qDAAsD,CAIjG,CEXA,SAAS,EAAsB,CAAY,EACzC,IAAM,EAAgB,SAAS,cAAc,CAAC,2BACxC,EAAiB,SAAS,cAAc,CAAC,4BACzC,EAAY,SAAS,cAAc,CAAC,iBACpC,EAAa,SAAS,cAAc,CAAC,iBAEvC,AAAwE,CAAA,SAAxE,SAAS,aAAa,CAAC,uCAAuC,KAAK,EAErE,EAAc,SAAS,CAAC,MAAM,CAAC,UAC/B,EAAe,SAAS,CAAC,GAAG,CAAC,UAG7B,EAAU,YAAY,CAAC,WAAY,IACnC,EAAW,eAAe,CAAC,cAG3B,EAAc,SAAS,CAAC,GAAG,CAAC,UAC5B,EAAe,SAAS,CAAC,MAAM,CAAC,UAGhC,EAAU,eAAe,CAAC,YAC1B,EAAW,YAAY,CAAC,WAAY,IAExC,C,E,A,W,G,C,Q,C,C,e,C,C,S,C,C,e,C,C,yB,C,C,C,O,C,O,C,C,K,C,C,O,C,C,C,O,C,M,C,C,U,C,C,C,A,a,O,S,Q,G,C,E,S,C,E,O,C,C,E,G,C,E,S,C,E,O,C,C,E,G,C,E,S,C,C,C,C,C,E,O,E,K,C,E,E,C,E,G,C,E,S,C,C,C,E,O,I,K,E,C,E,I,E,E,M,S,C,O,E,E,E,M,S,C,W,E,E,E,M,S,C,G,E,E,E,M,S,C,I,E,E,E,M,S,C,M,E,E,E,O,S,C,W,E,E,E,O,S,C,Q,E,E,E,O,S,C,K,E,E,E,O,S,C,O,E,E,E,O,S,C,O,E,E,E,O,S,C,I,E,E,E,O,S,C,c,E,E,E,O,S,C,I,E,G,E,U,W,I,I,E,U,M,C,E,A,M,G,E,E,E,E,I,C,C,E,C,S,C,E,C,O,E,E,E,G,S,E,C,E,O,S,C,E,I,I,E,U,M,C,E,A,M,E,E,E,E,G,E,E,E,E,I,C,C,E,E,C,S,C,E,C,O,E,E,E,E,C,C,S,E,C,C,C,E,I,E,U,M,C,G,A,K,I,S,C,E,C,S,C,E,C,E,G,E,E,M,I,E,E,M,C,K,K,C,I,E,C,C,E,C,G,A,U,O,E,C,I,E,E,G,I,I,E,I,C,C,C,E,C,C,E,E,E,C,C,C,E,C,C,C,C,O,C,C,S,E,C,E,I,E,E,M,I,G,C,E,E,G,E,G,E,E,K,M,O,C,G,C,C,E,C,A,S,C,E,I,I,E,E,E,E,M,C,I,E,E,I,C,C,C,E,C,I,E,O,C,E,G,G,A,U,O,G,E,W,G,O,C,C,E,C,E,G,C,C,E,C,G,O,C,C,S,E,C,C,C,E,K,A,O,G,C,I,E,E,E,G,G,E,C,G,E,G,C,O,E,E,G,E,G,A,Y,O,E,K,C,O,E,E,K,C,C,E,E,E,C,O,W,O,I,C,C,I,E,E,C,I,O,U,U,O,U,Q,Q,I,M,M,M,Q,a,O,K,S,S,U,S,O,O,M,W,U,O,W,K,Y,M,U,M,S,M,M,K,K,U,K,W,a,S,O,S,O,K,K,K,K,K,K,O,S,S,K,O,I,M,Q,M,M,Q,S,K,O,M,O,U,O,W,Q,M,O,K,W,S,S,I,U,M,W,I,K,K,O,I,O,U,S,S,Q,S,S,O,S,S,Q,M,U,M,Q,Q,K,W,W,Q,K,Q,O,K,Q,K,I,K,M,Q,M,E,E,E,C,M,I,W,c,e,e,gB,mB,S,W,O,O,U,S,O,I,Q,W,Q,Q,O,iB,S,O,W,Q,O,U,U,W,iB,O,O,Q,S,S,O,W,Q,O,Q,O,Q,E,E,E,C,U,gB,sB,c,mB,oB,oB,iB,e,U,U,U,U,U,iB,U,U,c,e,W,e,qB,c,S,e,E,E,E,C,U,gB,S,U,Y,mB,iB,gB,gB,gB,Q,Y,O,e,Y,U,gB,S,M,a,U,M,E,E,E,C,O,W,S,U,Q,S,K,a,gB,K,K,Q,U,W,Q,O,K,S,Q,S,O,O,U,S,M,Q,M,S,a,c,E,E,E,C,U,c,a,W,Y,U,U,S,S,Q,Y,a,iB,c,O,E,E,E,C,Q,E,E,E,C,S,S,Q,M,iB,e,uB,W,a,U,S,U,c,c,U,O,Q,Q,Q,O,U,W,e,S,c,W,W,U,M,W,0B,wB,W,Y,U,e,O,M,U,S,S,O,O,W,K,Y,Y,Q,O,Q,O,O,U,O,M,M,Y,Q,S,M,Y,W,Q,O,Q,U,a,S,O,U,U,c,c,U,gB,sB,S,U,U,a,W,M,W,M,W,O,O,U,a,Q,W,Q,O,Q,O,U,Q,M,S,O,Q,U,W,Q,Y,O,S,S,Q,Q,O,Q,O,E,E,E,C,gB,a,W,qB,Y,S,gB,gB,U,gB,iB,Q,O,K,Q,O,gB,Y,Y,Q,sB,8B,gB,kB,K,K,I,K,K,kB,Y,U,U,M,W,Y,M,W,O,e,Y,S,c,c,gB,c,Y,mB,e,a,e,c,K,K,K,K,a,W,gB,oB,S,O,K,kB,K,M,Y,I,K,K,K,K,U,Y,a,W,O,e,iB,e,mB,iB,Q,a,a,e,e,c,c,mB,Y,M,O,Q,S,O,M,O,a,S,W,U,Q,S,c,S,W,c,O,a,sB,mB,e,S,gB,sB,iB,I,K,K,S,O,O,c,Y,U,S,S,Q,O,kB,Q,mB,mB,e,c,e,c,a,e,mB,oB,iB,kB,oB,iB,S,e,Q,e,iB,W,c,U,U,Y,mB,c,kB,iB,a,O,K,K,U,S,U,a,U,a,gB,gB,Q,e,O,e,mB,mB,I,K,K,Q,I,K,K,I,a,E,E,E,C,S,c,Q,W,Q,e,c,a,a,Q,M,U,e,W,Q,Q,S,O,K,U,S,gB,S,S,iB,Y,W,c,U,U,gB,W,W,O,W,W,a,U,S,S,c,gB,uB,Y,Y,a,W,iB,iB,Y,U,Q,Q,E,E,E,C,a,S,c,Y,c,E,E,E,6B,E,E,yB,E,E,iB,E,E,gC,E,E,kB,E,E,6F,E,E,yB,E,E,+D,E,E,W,I,E,E,O,M,C,C,U,K,U,E,gB,E,e,E,4B,U,E,a,E,S,E,e,E,kB,E,c,E,Y,C,G,I,E,C,Q,E,K,E,uB,E,Q,E,S,C,E,E,S,C,C,C,E,G,A,U,O,G,A,Y,O,E,Y,C,O,K,I,E,K,E,wB,G,E,Y,C,I,C,E,E,Y,C,E,E,I,E,Y,C,E,I,E,E,E,G,C,O,E,Y,C,E,C,W,A,G,E,gB,A,G,C,E,C,M,E,C,O,Q,I,C,uB,E,0B,I,C,E,E,W,M,C,wB,E,C,sB,E,C,uB,E,C,yB,E,C,uB,E,C,wB,E,C,sB,E,C,oB,E,C,uB,E,A,C,E,O,A,S,I,I,E,E,U,M,C,G,A,K,I,S,C,E,C,S,C,E,C,A,a,O,O,K,O,E,A,G,E,G,G,E,O,C,Q,E,O,C,E,C,C,G,C,E,Q,E,E,Q,C,Q,G,E,Q,E,C,E,O,C,O,E,W,C,C,E,E,G,C,S,C,C,C,E,E,E,E,E,a,C,C,iB,C,C,oB,C,C,K,C,C,Q,C,C,W,C,C,a,E,E,Y,E,E,e,C,gB,C,C,U,C,C,a,C,C,C,E,E,E,S,C,G,E,E,a,G,E,E,U,G,E,E,e,G,E,E,c,G,E,E,c,G,A,Y,O,E,C,I,E,E,a,C,W,C,E,O,E,E,O,C,a,E,C,E,E,O,C,a,A,C,C,I,G,G,C,e,E,C,mB,E,C,uB,E,C,qB,E,C,C,E,C,W,E,C,C,E,G,G,C,E,W,C,A,Y,O,G,A,Y,O,I,I,A,K,I,G,kB,C,G,C,c,E,C,S,E,C,Y,E,C,U,E,C,U,E,C,kB,E,C,gB,E,C,e,E,C,C,E,C,e,E,C,C,E,G,K,G,E,C,E,I,K,K,K,K,E,E,G,K,G,E,C,E,I,K,K,K,E,E,G,O,I,C,E,K,C,a,C,S,C,E,a,C,E,W,C,E,M,I,E,mB,C,S,C,E,a,C,E,W,C,E,M,I,E,+B,C,S,C,E,a,C,E,W,C,E,M,C,C,C,I,G,K,G,K,G,C,E,G,C,E,G,C,E,G,C,E,G,C,E,G,C,E,G,C,E,G,C,E,G,C,E,G,C,E,G,C,E,G,C,E,G,C,E,G,C,E,G,C,E,G,C,E,G,C,E,G,K,G,E,C,E,C,iB,Q,W,O,gB,O,S,O,K,K,K,K,Q,U,W,W,Y,S,Q,M,W,Q,Q,Q,M,E,G,K,G,E,C,E,C,Q,Q,M,S,Q,Q,E,G,K,G,E,C,E,C,M,Q,M,K,Q,O,U,c,O,U,Q,Q,Q,Q,E,G,qC,G,6B,G,+B,G,G,G,C,E,G,K,G,E,C,E,C,G,G,G,C,G,G,E,C,E,C,K,K,K,K,Q,E,G,E,C,E,C,iB,E,G,E,C,E,C,Q,Q,O,I,S,E,G,K,G,C,wB,Y,C,G,K,G,K,G,E,a,C,Q,G,S,C,E,O,a,Q,a,Q,E,G,W,I,E,U,M,C,G,A,K,I,S,C,E,C,S,C,E,C,C,E,G,C,I,K,G,G,G,A,U,O,G,C,E,C,C,E,E,E,G,G,A,0B,C,G,A,K,G,O,C,E,iB,E,Y,E,iB,A,E,E,E,G,E,E,gB,E,C,E,E,Y,C,I,G,G,E,E,gB,E,C,E,E,Y,C,I,G,G,E,E,sB,E,C,E,E,kB,C,G,G,G,E,E,qB,E,E,I,E,iB,C,I,G,G,E,E,qB,E,E,I,E,iB,C,I,G,G,E,E,mB,E,C,E,E,e,C,I,G,G,E,E,e,E,C,E,E,W,C,I,C,E,G,E,E,e,E,C,E,E,W,C,I,C,E,G,E,E,E,iB,E,Y,C,G,A,C,I,E,e,C,G,A,C,I,E,e,C,G,E,uB,E,C,E,G,A,C,I,E,wB,C,G,E,kB,E,C,E,G,A,C,I,E,Y,C,G,E,c,E,C,E,G,E,U,E,C,E,G,E,mB,E,C,E,G,E,mB,E,C,E,G,E,U,E,C,E,G,A,C,I,E,Y,C,G,E,oB,E,C,E,G,A,C,I,E,Y,C,G,E,Q,E,C,E,G,E,kB,E,E,G,E,S,E,G,G,E,8B,E,G,G,E,uB,E,G,G,E,uB,E,C,E,E,uB,E,G,E,uB,C,Y,G,C,G,Y,C,E,uB,C,Y,A,E,E,uB,E,G,E,uB,C,kB,G,C,G,kB,C,E,uB,C,kB,A,E,E,uB,E,A,W,O,E,uB,C,8B,E,C,G,8B,C,E,uB,C,8B,A,E,I,C,G,C,C,E,I,C,G,C,C,E,K,G,E,C,E,G,G,E,C,C,I,G,I,G,E,G,G,E,G,I,C,I,G,G,G,E,G,G,E,G,G,E,G,I,C,I,G,U,G,E,G,G,E,G,G,E,G,I,C,I,G,M,G,E,G,G,E,G,G,E,G,K,E,Q,G,K,I,C,G,E,G,E,E,G,E,Q,C,K,E,Q,G,K,I,C,G,E,G,E,E,G,E,Q,C,K,E,iB,E,E,G,E,iB,C,I,E,e,G,K,I,C,G,E,G,E,E,G,E,e,C,K,I,C,E,C,Q,C,C,C,E,I,E,G,C,O,O,O,E,G,K,G,E,G,C,Q,E,O,G,K,E,E,oB,C,C,G,A,Y,O,E,oB,C,U,C,M,E,+E,G,A,Y,O,E,oB,C,e,C,M,E,oF,G,A,C,E,E,oB,A,E,U,C,G,M,K,I,G,C,E,E,E,E,E,O,G,A,U,O,I,C,G,E,U,C,G,E,G,E,G,G,E,E,G,E,C,E,I,K,K,E,E,G,E,C,E,I,K,E,E,G,S,C,E,I,E,G,G,G,E,O,E,C,E,C,a,G,Q,U,C,E,I,E,E,E,O,E,E,E,E,O,Q,E,E,C,E,Y,C,G,E,Y,G,G,A,E,Y,G,G,A,Q,E,E,Y,G,G,A,Q,G,C,A,mB,G,E,C,E,A,E,C,C,E,C,E,C,E,Y,G,G,A,E,Y,G,G,A,S,E,E,Y,G,G,A,S,G,E,C,E,C,C,C,E,C,E,C,E,Y,G,G,A,C,E,Y,G,M,E,C,E,A,G,C,E,Y,G,M,E,C,E,A,G,C,E,C,E,E,C,E,C,E,E,C,E,C,E,A,E,A,0B,M,E,C,E,Y,C,C,E,G,S,C,E,E,E,O,C,C,Q,C,G,G,C,G,G,W,C,E,C,M,E,C,G,E,C,E,G,S,C,C,C,E,G,C,E,E,O,C,C,U,E,gB,C,G,K,C,E,C,M,E,C,E,E,O,C,C,U,K,K,C,E,C,G,E,e,C,G,A,O,G,G,I,G,G,C,G,E,C,M,E,C,M,G,C,E,Y,C,E,G,C,M,E,C,E,E,G,S,C,E,I,E,K,E,K,G,G,E,oB,M,C,I,E,E,E,e,E,G,C,C,E,A,C,0B,I,K,I,C,E,iE,E,gB,E,I,E,E,E,U,C,G,E,G,K,G,G,C,E,I,I,e,C,E,G,C,M,E,C,C,G,C,G,C,E,e,C,C,E,G,c,C,G,W,M,G,C,E,e,C,S,C,G,G,C,C,M,E,C,C,C,I,E,E,I,E,E,e,O,C,G,G,E,Y,C,E,c,C,G,E,U,C,E,E,M,K,I,G,I,C,E,G,O,O,C,E,C,G,E,e,C,C,E,G,S,C,E,O,G,I,C,E,a,E,E,E,E,Y,C,E,Y,C,E,S,C,E,2B,C,E,kB,C,K,E,G,S,C,E,O,a,G,C,A,U,O,E,Q,E,A,U,O,E,W,E,A,Y,O,E,W,E,C,C,E,U,Y,C,G,A,Y,O,E,e,E,A,Y,O,E,Y,E,A,U,O,E,Y,E,A,Y,O,E,Y,E,A,Y,O,E,a,A,C,E,G,S,C,E,M,A,Y,O,G,a,C,E,S,G,C,C,C,C,C,E,E,E,A,I,E,I,C,E,E,E,G,E,C,I,G,S,C,E,I,E,K,G,G,G,sB,C,E,M,G,G,O,G,G,C,E,I,E,G,E,Q,E,G,G,G,mB,C,E,C,Q,E,Y,E,G,E,a,I,C,G,E,iB,G,E,U,E,S,G,E,U,E,W,G,E,Q,G,E,sB,E,I,E,Q,G,E,O,E,E,U,E,I,E,O,G,G,C,E,G,C,E,C,E,E,E,C,E,C,C,G,C,E,C,E,E,G,K,G,Y,Y,Q,E,G,Y,C,I,G,Y,Y,U,G,Y,C,I,M,C,E,G,I,C,E,C,E,C,C,I,E,G,I,E,U,C,E,G,I,E,U,C,G,G,E,C,I,E,E,M,C,I,I,E,E,E,G,E,E,E,C,I,E,G,C,C,E,C,C,E,C,E,c,C,A,C,E,c,E,C,E,E,E,Y,C,E,G,G,C,C,C,O,G,G,C,C,Q,A,a,G,C,G,I,A,C,A,a,G,A,Y,G,A,a,C,G,E,8B,E,S,G,G,G,C,I,I,E,Q,G,E,I,G,E,E,W,C,E,C,G,G,G,C,A,I,E,E,E,E,I,G,E,W,G,I,E,E,O,C,C,Q,E,S,E,G,E,W,C,I,G,G,qB,C,E,M,C,E,E,G,S,C,C,C,C,C,E,G,I,C,A,O,G,A,S,C,G,C,K,G,K,E,E,M,C,E,G,I,C,E,C,E,E,E,G,S,G,I,E,G,S,G,C,E,C,E,E,E,C,E,C,C,I,C,G,I,C,G,Y,Y,Q,E,G,Y,C,I,G,Y,Y,U,G,Y,C,E,G,C,G,kB,Y,Q,E,G,kB,C,I,G,kB,Y,U,G,kB,C,E,G,A,O,G,G,8B,E,C,G,Y,Y,Q,E,G,Y,C,I,G,Y,Y,U,G,Y,C,E,C,E,M,C,C,M,G,E,C,E,O,G,E,G,E,E,G,W,G,A,C,A,Q,G,A,e,G,A,S,C,G,A,W,G,A,I,E,E,U,E,C,E,O,G,I,C,E,G,E,E,G,W,G,E,M,C,E,M,C,C,E,G,S,C,E,M,A,mB,G,E,E,G,E,G,S,C,E,G,G,wB,C,E,M,G,C,W,C,C,C,E,G,C,G,G,G,O,I,E,C,S,G,U,G,S,C,E,kB,G,c,K,C,E,E,E,M,C,K,K,C,G,C,K,C,C,a,C,C,M,C,C,C,C,C,E,C,E,G,G,E,A,U,E,E,E,G,G,E,Q,C,E,E,S,C,E,E,Q,C,C,E,E,a,C,K,E,G,G,qB,C,E,G,E,E,S,C,I,C,A,O,G,A,S,C,I,G,E,G,E,A,gB,G,I,E,gC,G,C,G,E,G,Q,C,G,E,a,G,G,E,G,C,E,Q,E,S,G,C,I,E,O,G,C,G,E,G,Q,C,I,E,C,G,G,G,C,A,I,E,E,E,E,I,G,I,E,G,E,Q,E,G,G,E,E,I,G,G,A,U,O,G,A,Y,O,E,gB,E,G,Q,O,E,gB,C,E,I,I,c,E,E,U,C,G,K,K,mB,E,E,e,C,E,E,G,C,E,E,c,C,E,E,G,E,Y,C,E,G,G,G,G,G,E,E,O,C,C,M,E,C,E,C,G,G,uB,C,E,K,E,G,S,E,C,E,I,E,K,E,G,G,I,G,G,uB,C,E,M,E,E,Q,I,G,G,sB,C,E,M,G,G,G,G,E,O,Y,G,E,E,O,E,G,G,sB,C,E,K,E,O,E,Q,C,S,C,E,I,E,U,M,C,G,A,K,I,S,C,E,C,S,C,E,C,C,E,E,K,E,K,E,K,E,K,G,C,G,C,C,G,C,E,a,E,A,U,O,G,C,G,I,G,A,Y,O,E,Q,C,C,G,A,U,M,C,E,E,Q,E,E,M,E,kC,M,M,E,8B,G,C,E,W,C,O,E,G,I,G,G,E,O,C,E,C,U,O,G,C,G,C,C,E,G,C,G,E,Q,C,C,I,E,G,E,Q,E,G,C,E,C,E,E,E,C,E,C,M,E,0D,C,M,G,a,E,A,C,E,A,C,E,G,gB,E,a,C,U,C,E,C,E,E,Q,G,E,O,E,A,S,E,Q,C,E,E,A,S,E,Q,C,E,E,E,W,C,O,C,G,C,I,C,I,C,I,A,K,E,O,C,K,O,G,G,E,U,C,G,E,G,C,C,E,G,E,E,O,G,K,G,G,E,C,G,I,G,E,U,E,I,E,G,G,E,G,K,E,E,Q,I,G,G,G,G,E,O,Y,G,G,E,O,E,G,G,O,E,G,G,C,G,G,I,E,G,I,C,E,a,E,E,U,E,E,W,C,E,U,O,E,E,M,C,G,U,E,G,c,A,G,C,E,G,I,C,E,E,C,E,E,C,C,I,E,G,E,S,C,E,S,C,O,I,E,C,W,E,E,a,E,E,a,C,O,E,E,a,C,O,C,I,E,E,E,E,a,C,O,C,I,G,C,E,a,E,a,C,O,C,I,C,M,C,E,I,E,C,G,G,G,C,A,I,E,E,E,E,I,G,G,G,E,U,C,G,C,E,E,S,C,W,I,E,U,M,C,G,A,K,I,S,C,E,C,S,C,E,C,C,E,G,G,G,C,C,E,E,W,C,W,G,K,G,C,C,E,E,gB,C,S,C,C,C,C,C,E,O,I,G,C,G,G,G,G,G,G,E,E,E,O,C,S,C,C,C,E,Y,O,G,E,E,C,E,C,E,E,E,U,C,S,C,C,C,E,G,A,K,I,E,C,I,E,E,E,C,E,C,G,O,A,K,E,K,E,E,E,C,E,C,E,E,C,E,A,C,O,E,E,C,E,C,E,E,W,C,S,C,E,E,C,E,C,E,A,E,E,c,C,W,G,G,E,C,G,IJzEA,SAAS,gBAAgB,CAAC,mBAAoB,KAC5C,QAAQ,GAAG,CAAC,sCAGZ,OAAO,SAAS,CCYH,EDXb,OAAO,QAAQ,CAAG,CAAE,cAAA,EAAe,aAAA,EAAc,UAAA,EAAW,aAAA,CAAa,EIFzE,AAeF,WAEE,IAAM,EAAc,6BAGpB,SAAS,cAAc,CAAC,qBAAqB,YAAY,CAAC,UAAW,GAGrE,QAAQ,GAAG,CAAC,uBAAwB,EACtC,IArBE,AA0BF,WACE,IAAM,EAAe,SAAS,gBAAgB,CAAC,+BACzB,SAAS,cAAc,CAAC,2BACvB,SAAS,cAAc,CAAC,4BAG/C,EAAsB,GAGtB,EAAa,OAAO,CAAC,AAAA,IACnB,EAAM,gBAAgB,CAAC,SAAU,IAAM,EAAsB,GAC/D,EACF,IAnCE,AAqEF,WACE,IAAM,EAAO,SAAS,cAAc,CAAC,qBAC/B,EAAiB,SAAS,cAAc,CAAC,gBAG/C,EAAK,gBAAgB,CAAC,SAAU,SAAS,CAAK,EAC5C,EAAM,cAAc,GAGpB,SAAS,cAAc,CAAC,wBAAwB,SAAS,CAAC,MAAM,CAAC,UAGjE,EAAe,SAAS,CAAC,GAAG,CAAC,WAC7B,EAAe,QAAQ,CAAG,CAAA,EAG1B,IAAM,EAAW,IAAI,SAAS,GAK9B,GAAI,AAAgB,SAFA,SAAS,aAAa,CAAC,uCAAuC,KAAK,CAMrF,CAAA,GAFA,EAAS,MAAM,CAAC,kBAEZ,CAAC,EAAS,GAAG,CAAC,kBAAoB,AAAyC,KAAzC,EAAS,GAAG,CAAC,iBAAiB,IAAI,GAAW,CACjF,OAAO,QAAQ,CAAC,SAAS,CAAC,uCAE1B,EAAe,SAAS,CAAC,MAAM,CAAC,WAChC,EAAe,QAAQ,CAAG,CAAA,EAE1B,SAAS,cAAc,CAAC,wBAAwB,SAAS,CAAC,GAAG,CAAC,UAC9D,MACF,CAAA,MAMA,GAHA,EAAS,GAAG,CAAC,gBAAiB,IAG1B,CAAC,EAAS,GAAG,CAAC,mBAAqB,AAAwC,IAAxC,EAAS,GAAG,CAAC,kBAAkB,IAAI,CAAQ,CAChF,OAAO,QAAQ,CAAC,SAAS,CAAC,yCAE1B,EAAe,SAAS,CAAC,MAAM,CAAC,WAChC,EAAe,QAAQ,CAAG,CAAA,EAE1B,SAAS,cAAc,CAAC,wBAAwB,SAAS,CAAC,GAAG,CAAC,UAC9D,MACF,CAIF,IAAM,EAAa,OAAO,QAAQ,CAAC,YAAY,CAAC,GAEhD,GAAI,CAAC,EAAW,OAAO,CAAE,CAEvB,OAAO,QAAQ,CAAC,SAAS,CAAC,EAAW,YAAY,EAEjD,SAAS,cAAc,CAAC,wBAAwB,SAAS,CAAC,GAAG,CAAC,UAE9D,EAAe,SAAS,CAAC,MAAM,CAAC,WAChC,EAAe,QAAQ,CAAG,CAAA,EAC1B,MACF,CAMA,MAHoB,6BAGD,CACjB,OAAQ,OACR,KAAM,CACR,GACC,IAAI,CAAC,AAAA,IACJ,GAAI,CAAC,EAAS,EAAE,CACd,MAAM,AAAI,MAAM,gCAAkC,EAAS,MAAM,EAEnE,OAAO,EAAS,IAAI,EACtB,GACC,IAAI,CAAC,AAAA,IAEJ,SAAS,cAAc,CAAC,uBAAuB,KAAK,CAAG,CACzD,GACC,KAAK,CAAC,AAAA,IACL,OAAO,QAAQ,CAAC,SAAS,CAAC,kBAAoB,EAAM,OAAO,CAC7D,GACC,OAAO,CAAC,KAEP,SAAS,cAAc,CAAC,wBAAwB,SAAS,CAAC,GAAG,CAAC,UAE9D,EAAe,SAAS,CAAC,MAAM,CAAC,WAChC,EAAe,QAAQ,CAAG,CAAA,CAC5B,EACF,GAGA,EAAK,gBAAgB,CAAC,qBAAsB,SAAS,CAAK,EACxD,IAAI,EAAW,2CAGf,GAAI,CACF,IAAM,EAAW,KAAK,KAAK,CAAC,EAAM,MAAM,CAAC,GAAG,CAAC,YAAY,CACrD,CAAA,EAAS,KAAK,EAChB,CAAA,EAAW,EAAS,KAAK,AAAL,CAExB,CAAE,MAAO,EAAG,CAEZ,CAEA,OAAO,QAAQ,CAAC,SAAS,CAAC,EAC5B,GAEA,EAAK,gBAAgB,CAAC,iBAAkB,WACtC,OAAO,QAAQ,CAAC,SAAS,CAAC,sEAC5B,EACF,IApLE,AAyLF,WACE,IAAM,EAAa,SAAS,cAAc,CAAC,YAE3C,GAAI,CAAC,EAAY,CACf,QAAQ,IAAI,CAAC,iDACb,MACF,CAEA,EAAW,gBAAgB,CAAC,QAAS,WACnC,IAAM,EAAqB,SAAS,cAAc,CAAC,uBAEnD,GAAI,GAAsB,AAAoC,KAApC,EAAmB,KAAK,CAAC,IAAI,GAErD,GAAI,CACF,UAAU,SAAS,CAAC,SAAS,CAAC,EAAmB,KAAK,EAAE,IAAI,CAAC,KAE3D,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,eACnB,WAAW,KACT,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,cACxB,EAAG,IACL,GAAG,KAAK,CAAC,KACP,OAAO,QAAQ,CAAC,SAAS,CAAC,8BAC5B,EACF,CAAE,MAAO,EAAO,CAEd,IAAM,EAAW,SAAS,aAAa,CAAC,WACxC,CAAA,EAAS,KAAK,CAAG,EAAmB,KAAK,CACzC,EAAS,KAAK,CAAC,QAAQ,CAAG,QAC1B,SAAS,IAAI,CAAC,WAAW,CAAC,GAC1B,EAAS,KAAK,GACd,EAAS,MAAM,GAEf,GAAI,CACF,SAAS,WAAW,CAAC,QACrB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,eACnB,WAAW,KACT,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,cACxB,EAAG,IACL,CAAE,MAAO,EAAK,CACZ,OAAO,QAAQ,CAAC,SAAS,CAAC,8BAC5B,CAEA,SAAS,IAAI,CAAC,WAAW,CAAC,EAC5B,CAEJ,EACF,GJ1OA","sources":["<anon>","src/js/app.js","src/config.js","src/utils.js","node_modules/dompurify/dist/purify.js","src/js/form-handlers.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n// Main application entry point\n// Environment configuration\nconst $bebe1cbb5a309c8c$var$isDevelopment = false;\n// API configuration\nconst $bebe1cbb5a309c8c$var$config = {\n    // API base URL - determined purely by NODE_ENV\n    apiBaseUrl: $bebe1cbb5a309c8c$var$isDevelopment ? 'http://localhost:8000/generate_cover_letter' // Development URL with path\n     : \"https://coverletter-api.rasyidanaf.com/generate_cover_letter\",\n    // Version info\n    version: '1.0.0',\n    // Feature flags\n    features: {\n        debug: $bebe1cbb5a309c8c$var$isDevelopment\n    }\n};\n// Freeze the config to prevent modifications\nObject.freeze($bebe1cbb5a309c8c$var$config);\nvar $bebe1cbb5a309c8c$export$2e2bcd8739ae039 = $bebe1cbb5a309c8c$var$config;\n\n\n// Import DOMPurify (will be loaded as a module in index.html)\nvar $d349326c2b62c55f$exports = {};\n/*! @license DOMPurify 3.2.4 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.2.4/LICENSE */ (function(global, factory) {\n    $d349326c2b62c55f$exports = factory();\n})($d349326c2b62c55f$exports, function() {\n    'use strict';\n    const { entries: entries, setPrototypeOf: setPrototypeOf, isFrozen: isFrozen, getPrototypeOf: getPrototypeOf, getOwnPropertyDescriptor: getOwnPropertyDescriptor } = Object;\n    let { freeze: freeze, seal: seal, create: create } = Object; // eslint-disable-line import/no-mutable-exports\n    let { apply: apply, construct: construct } = typeof Reflect !== 'undefined' && Reflect;\n    if (!freeze) freeze = function freeze(x) {\n        return x;\n    };\n    if (!seal) seal = function seal(x) {\n        return x;\n    };\n    if (!apply) apply = function apply(fun, thisValue, args) {\n        return fun.apply(thisValue, args);\n    };\n    if (!construct) construct = function construct(Func, args) {\n        return new Func(...args);\n    };\n    const arrayForEach = unapply(Array.prototype.forEach);\n    const arrayLastIndexOf = unapply(Array.prototype.lastIndexOf);\n    const arrayPop = unapply(Array.prototype.pop);\n    const arrayPush = unapply(Array.prototype.push);\n    const arraySplice = unapply(Array.prototype.splice);\n    const stringToLowerCase = unapply(String.prototype.toLowerCase);\n    const stringToString = unapply(String.prototype.toString);\n    const stringMatch = unapply(String.prototype.match);\n    const stringReplace = unapply(String.prototype.replace);\n    const stringIndexOf = unapply(String.prototype.indexOf);\n    const stringTrim = unapply(String.prototype.trim);\n    const objectHasOwnProperty = unapply(Object.prototype.hasOwnProperty);\n    const regExpTest = unapply(RegExp.prototype.test);\n    const typeErrorCreate = unconstruct(TypeError);\n    /**\n   * Creates a new function that calls the given function with a specified thisArg and arguments.\n   *\n   * @param func - The function to be wrapped and called.\n   * @returns A new function that calls the given function with a specified thisArg and arguments.\n   */ function unapply(func) {\n        return function(thisArg) {\n            for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];\n            return apply(func, thisArg, args);\n        };\n    }\n    /**\n   * Creates a new function that constructs an instance of the given constructor function with the provided arguments.\n   *\n   * @param func - The constructor function to be wrapped and called.\n   * @returns A new function that constructs an instance of the given constructor function with the provided arguments.\n   */ function unconstruct(func) {\n        return function() {\n            for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];\n            return construct(func, args);\n        };\n    }\n    /**\n   * Add properties to a lookup table\n   *\n   * @param set - The set to which elements will be added.\n   * @param array - The array containing elements to be added to the set.\n   * @param transformCaseFunc - An optional function to transform the case of each element before adding to the set.\n   * @returns The modified set with added elements.\n   */ function addToSet(set, array) {\n        let transformCaseFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : stringToLowerCase;\n        if (setPrototypeOf) // Make 'in' and truthy checks like Boolean(set.constructor)\n        // independent of any properties defined on Object.prototype.\n        // Prevent prototype setters from intercepting set as a this value.\n        setPrototypeOf(set, null);\n        let l = array.length;\n        while(l--){\n            let element = array[l];\n            if (typeof element === 'string') {\n                const lcElement = transformCaseFunc(element);\n                if (lcElement !== element) {\n                    // Config presets (e.g. tags.js, attrs.js) are immutable.\n                    if (!isFrozen(array)) array[l] = lcElement;\n                    element = lcElement;\n                }\n            }\n            set[element] = true;\n        }\n        return set;\n    }\n    /**\n   * Clean up an array to harden against CSPP\n   *\n   * @param array - The array to be cleaned.\n   * @returns The cleaned version of the array\n   */ function cleanArray(array) {\n        for(let index = 0; index < array.length; index++){\n            const isPropertyExist = objectHasOwnProperty(array, index);\n            if (!isPropertyExist) array[index] = null;\n        }\n        return array;\n    }\n    /**\n   * Shallow clone an object\n   *\n   * @param object - The object to be cloned.\n   * @returns A new object that copies the original.\n   */ function clone(object) {\n        const newObject = create(null);\n        for (const [property, value] of entries(object)){\n            const isPropertyExist = objectHasOwnProperty(object, property);\n            if (isPropertyExist) {\n                if (Array.isArray(value)) newObject[property] = cleanArray(value);\n                else if (value && typeof value === 'object' && value.constructor === Object) newObject[property] = clone(value);\n                else newObject[property] = value;\n            }\n        }\n        return newObject;\n    }\n    /**\n   * This method automatically checks if the prop is function or getter and behaves accordingly.\n   *\n   * @param object - The object to look up the getter function in its prototype chain.\n   * @param prop - The property name for which to find the getter function.\n   * @returns The getter function found in the prototype chain or a fallback function.\n   */ function lookupGetter(object, prop) {\n        while(object !== null){\n            const desc = getOwnPropertyDescriptor(object, prop);\n            if (desc) {\n                if (desc.get) return unapply(desc.get);\n                if (typeof desc.value === 'function') return unapply(desc.value);\n            }\n            object = getPrototypeOf(object);\n        }\n        function fallbackValue() {\n            return null;\n        }\n        return fallbackValue;\n    }\n    const html$1 = freeze([\n        'a',\n        'abbr',\n        'acronym',\n        'address',\n        'area',\n        'article',\n        'aside',\n        'audio',\n        'b',\n        'bdi',\n        'bdo',\n        'big',\n        'blink',\n        'blockquote',\n        'body',\n        'br',\n        'button',\n        'canvas',\n        'caption',\n        'center',\n        'cite',\n        'code',\n        'col',\n        'colgroup',\n        'content',\n        'data',\n        'datalist',\n        'dd',\n        'decorator',\n        'del',\n        'details',\n        'dfn',\n        'dialog',\n        'dir',\n        'div',\n        'dl',\n        'dt',\n        'element',\n        'em',\n        'fieldset',\n        'figcaption',\n        'figure',\n        'font',\n        'footer',\n        'form',\n        'h1',\n        'h2',\n        'h3',\n        'h4',\n        'h5',\n        'h6',\n        'head',\n        'header',\n        'hgroup',\n        'hr',\n        'html',\n        'i',\n        'img',\n        'input',\n        'ins',\n        'kbd',\n        'label',\n        'legend',\n        'li',\n        'main',\n        'map',\n        'mark',\n        'marquee',\n        'menu',\n        'menuitem',\n        'meter',\n        'nav',\n        'nobr',\n        'ol',\n        'optgroup',\n        'option',\n        'output',\n        'p',\n        'picture',\n        'pre',\n        'progress',\n        'q',\n        'rp',\n        'rt',\n        'ruby',\n        's',\n        'samp',\n        'section',\n        'select',\n        'shadow',\n        'small',\n        'source',\n        'spacer',\n        'span',\n        'strike',\n        'strong',\n        'style',\n        'sub',\n        'summary',\n        'sup',\n        'table',\n        'tbody',\n        'td',\n        'template',\n        'textarea',\n        'tfoot',\n        'th',\n        'thead',\n        'time',\n        'tr',\n        'track',\n        'tt',\n        'u',\n        'ul',\n        'var',\n        'video',\n        'wbr'\n    ]);\n    const svg$1 = freeze([\n        'svg',\n        'a',\n        'altglyph',\n        'altglyphdef',\n        'altglyphitem',\n        'animatecolor',\n        'animatemotion',\n        'animatetransform',\n        'circle',\n        'clippath',\n        'defs',\n        'desc',\n        'ellipse',\n        'filter',\n        'font',\n        'g',\n        'glyph',\n        'glyphref',\n        'hkern',\n        'image',\n        'line',\n        'lineargradient',\n        'marker',\n        'mask',\n        'metadata',\n        'mpath',\n        'path',\n        'pattern',\n        'polygon',\n        'polyline',\n        'radialgradient',\n        'rect',\n        'stop',\n        'style',\n        'switch',\n        'symbol',\n        'text',\n        'textpath',\n        'title',\n        'tref',\n        'tspan',\n        'view',\n        'vkern'\n    ]);\n    const svgFilters = freeze([\n        'feBlend',\n        'feColorMatrix',\n        'feComponentTransfer',\n        'feComposite',\n        'feConvolveMatrix',\n        'feDiffuseLighting',\n        'feDisplacementMap',\n        'feDistantLight',\n        'feDropShadow',\n        'feFlood',\n        'feFuncA',\n        'feFuncB',\n        'feFuncG',\n        'feFuncR',\n        'feGaussianBlur',\n        'feImage',\n        'feMerge',\n        'feMergeNode',\n        'feMorphology',\n        'feOffset',\n        'fePointLight',\n        'feSpecularLighting',\n        'feSpotLight',\n        'feTile',\n        'feTurbulence'\n    ]);\n    // List of SVG elements that are disallowed by default.\n    // We still need to know them so that we can do namespace\n    // checks properly in case one wants to add them to\n    // allow-list.\n    const svgDisallowed = freeze([\n        'animate',\n        'color-profile',\n        'cursor',\n        'discard',\n        'font-face',\n        'font-face-format',\n        'font-face-name',\n        'font-face-src',\n        'font-face-uri',\n        'foreignobject',\n        'hatch',\n        'hatchpath',\n        'mesh',\n        'meshgradient',\n        'meshpatch',\n        'meshrow',\n        'missing-glyph',\n        'script',\n        'set',\n        'solidcolor',\n        'unknown',\n        'use'\n    ]);\n    const mathMl$1 = freeze([\n        'math',\n        'menclose',\n        'merror',\n        'mfenced',\n        'mfrac',\n        'mglyph',\n        'mi',\n        'mlabeledtr',\n        'mmultiscripts',\n        'mn',\n        'mo',\n        'mover',\n        'mpadded',\n        'mphantom',\n        'mroot',\n        'mrow',\n        'ms',\n        'mspace',\n        'msqrt',\n        'mstyle',\n        'msub',\n        'msup',\n        'msubsup',\n        'mtable',\n        'mtd',\n        'mtext',\n        'mtr',\n        'munder',\n        'munderover',\n        'mprescripts'\n    ]);\n    // Similarly to SVG, we want to know all MathML elements,\n    // even those that we disallow by default.\n    const mathMlDisallowed = freeze([\n        'maction',\n        'maligngroup',\n        'malignmark',\n        'mlongdiv',\n        'mscarries',\n        'mscarry',\n        'msgroup',\n        'mstack',\n        'msline',\n        'msrow',\n        'semantics',\n        'annotation',\n        'annotation-xml',\n        'mprescripts',\n        'none'\n    ]);\n    const text = freeze([\n        '#text'\n    ]);\n    const html = freeze([\n        'accept',\n        'action',\n        'align',\n        'alt',\n        'autocapitalize',\n        'autocomplete',\n        'autopictureinpicture',\n        'autoplay',\n        'background',\n        'bgcolor',\n        'border',\n        'capture',\n        'cellpadding',\n        'cellspacing',\n        'checked',\n        'cite',\n        'class',\n        'clear',\n        'color',\n        'cols',\n        'colspan',\n        'controls',\n        'controlslist',\n        'coords',\n        'crossorigin',\n        'datetime',\n        'decoding',\n        'default',\n        'dir',\n        'disabled',\n        'disablepictureinpicture',\n        'disableremoteplayback',\n        'download',\n        'draggable',\n        'enctype',\n        'enterkeyhint',\n        'face',\n        'for',\n        'headers',\n        'height',\n        'hidden',\n        'high',\n        'href',\n        'hreflang',\n        'id',\n        'inputmode',\n        'integrity',\n        'ismap',\n        'kind',\n        'label',\n        'lang',\n        'list',\n        'loading',\n        'loop',\n        'low',\n        'max',\n        'maxlength',\n        'media',\n        'method',\n        'min',\n        'minlength',\n        'multiple',\n        'muted',\n        'name',\n        'nonce',\n        'noshade',\n        'novalidate',\n        'nowrap',\n        'open',\n        'optimum',\n        'pattern',\n        'placeholder',\n        'playsinline',\n        'popover',\n        'popovertarget',\n        'popovertargetaction',\n        'poster',\n        'preload',\n        'pubdate',\n        'radiogroup',\n        'readonly',\n        'rel',\n        'required',\n        'rev',\n        'reversed',\n        'role',\n        'rows',\n        'rowspan',\n        'spellcheck',\n        'scope',\n        'selected',\n        'shape',\n        'size',\n        'sizes',\n        'span',\n        'srclang',\n        'start',\n        'src',\n        'srcset',\n        'step',\n        'style',\n        'summary',\n        'tabindex',\n        'title',\n        'translate',\n        'type',\n        'usemap',\n        'valign',\n        'value',\n        'width',\n        'wrap',\n        'xmlns',\n        'slot'\n    ]);\n    const svg = freeze([\n        'accent-height',\n        'accumulate',\n        'additive',\n        'alignment-baseline',\n        'amplitude',\n        'ascent',\n        'attributename',\n        'attributetype',\n        'azimuth',\n        'basefrequency',\n        'baseline-shift',\n        'begin',\n        'bias',\n        'by',\n        'class',\n        'clip',\n        'clippathunits',\n        'clip-path',\n        'clip-rule',\n        'color',\n        'color-interpolation',\n        'color-interpolation-filters',\n        'color-profile',\n        'color-rendering',\n        'cx',\n        'cy',\n        'd',\n        'dx',\n        'dy',\n        'diffuseconstant',\n        'direction',\n        'display',\n        'divisor',\n        'dur',\n        'edgemode',\n        'elevation',\n        'end',\n        'exponent',\n        'fill',\n        'fill-opacity',\n        'fill-rule',\n        'filter',\n        'filterunits',\n        'flood-color',\n        'flood-opacity',\n        'font-family',\n        'font-size',\n        'font-size-adjust',\n        'font-stretch',\n        'font-style',\n        'font-variant',\n        'font-weight',\n        'fx',\n        'fy',\n        'g1',\n        'g2',\n        'glyph-name',\n        'glyphref',\n        'gradientunits',\n        'gradienttransform',\n        'height',\n        'href',\n        'id',\n        'image-rendering',\n        'in',\n        'in2',\n        'intercept',\n        'k',\n        'k1',\n        'k2',\n        'k3',\n        'k4',\n        'kerning',\n        'keypoints',\n        'keysplines',\n        'keytimes',\n        'lang',\n        'lengthadjust',\n        'letter-spacing',\n        'kernelmatrix',\n        'kernelunitlength',\n        'lighting-color',\n        'local',\n        'marker-end',\n        'marker-mid',\n        'marker-start',\n        'markerheight',\n        'markerunits',\n        'markerwidth',\n        'maskcontentunits',\n        'maskunits',\n        'max',\n        'mask',\n        'media',\n        'method',\n        'mode',\n        'min',\n        'name',\n        'numoctaves',\n        'offset',\n        'operator',\n        'opacity',\n        'order',\n        'orient',\n        'orientation',\n        'origin',\n        'overflow',\n        'paint-order',\n        'path',\n        'pathlength',\n        'patterncontentunits',\n        'patterntransform',\n        'patternunits',\n        'points',\n        'preservealpha',\n        'preserveaspectratio',\n        'primitiveunits',\n        'r',\n        'rx',\n        'ry',\n        'radius',\n        'refx',\n        'refy',\n        'repeatcount',\n        'repeatdur',\n        'restart',\n        'result',\n        'rotate',\n        'scale',\n        'seed',\n        'shape-rendering',\n        'slope',\n        'specularconstant',\n        'specularexponent',\n        'spreadmethod',\n        'startoffset',\n        'stddeviation',\n        'stitchtiles',\n        'stop-color',\n        'stop-opacity',\n        'stroke-dasharray',\n        'stroke-dashoffset',\n        'stroke-linecap',\n        'stroke-linejoin',\n        'stroke-miterlimit',\n        'stroke-opacity',\n        'stroke',\n        'stroke-width',\n        'style',\n        'surfacescale',\n        'systemlanguage',\n        'tabindex',\n        'tablevalues',\n        'targetx',\n        'targety',\n        'transform',\n        'transform-origin',\n        'text-anchor',\n        'text-decoration',\n        'text-rendering',\n        'textlength',\n        'type',\n        'u1',\n        'u2',\n        'unicode',\n        'values',\n        'viewbox',\n        'visibility',\n        'version',\n        'vert-adv-y',\n        'vert-origin-x',\n        'vert-origin-y',\n        'width',\n        'word-spacing',\n        'wrap',\n        'writing-mode',\n        'xchannelselector',\n        'ychannelselector',\n        'x',\n        'x1',\n        'x2',\n        'xmlns',\n        'y',\n        'y1',\n        'y2',\n        'z',\n        'zoomandpan'\n    ]);\n    const mathMl = freeze([\n        'accent',\n        'accentunder',\n        'align',\n        'bevelled',\n        'close',\n        'columnsalign',\n        'columnlines',\n        'columnspan',\n        'denomalign',\n        'depth',\n        'dir',\n        'display',\n        'displaystyle',\n        'encoding',\n        'fence',\n        'frame',\n        'height',\n        'href',\n        'id',\n        'largeop',\n        'length',\n        'linethickness',\n        'lspace',\n        'lquote',\n        'mathbackground',\n        'mathcolor',\n        'mathsize',\n        'mathvariant',\n        'maxsize',\n        'minsize',\n        'movablelimits',\n        'notation',\n        'numalign',\n        'open',\n        'rowalign',\n        'rowlines',\n        'rowspacing',\n        'rowspan',\n        'rspace',\n        'rquote',\n        'scriptlevel',\n        'scriptminsize',\n        'scriptsizemultiplier',\n        'selection',\n        'separator',\n        'separators',\n        'stretchy',\n        'subscriptshift',\n        'supscriptshift',\n        'symmetric',\n        'voffset',\n        'width',\n        'xmlns'\n    ]);\n    const xml = freeze([\n        'xlink:href',\n        'xml:id',\n        'xlink:title',\n        'xml:space',\n        'xmlns:xlink'\n    ]);\n    // eslint-disable-next-line unicorn/better-regex\n    const MUSTACHE_EXPR = seal(/\\{\\{[\\w\\W]*|[\\w\\W]*\\}\\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode\n    const ERB_EXPR = seal(/<%[\\w\\W]*|[\\w\\W]*%>/gm);\n    const TMPLIT_EXPR = seal(/\\$\\{[\\w\\W]*/gm); // eslint-disable-line unicorn/better-regex\n    const DATA_ATTR = seal(/^data-[\\-\\w.\\u00B7-\\uFFFF]+$/); // eslint-disable-line no-useless-escape\n    const ARIA_ATTR = seal(/^aria-[\\-\\w]+$/); // eslint-disable-line no-useless-escape\n    const IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i // eslint-disable-line no-useless-escape\n    );\n    const IS_SCRIPT_OR_DATA = seal(/^(?:\\w+script|data):/i);\n    const ATTR_WHITESPACE = seal(/[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205F\\u3000]/g // eslint-disable-line no-control-regex\n    );\n    const DOCTYPE_NAME = seal(/^html$/i);\n    const CUSTOM_ELEMENT = seal(/^[a-z][.\\w]*(-[.\\w]+)+$/i);\n    var EXPRESSIONS = /*#__PURE__*/ Object.freeze({\n        __proto__: null,\n        ARIA_ATTR: ARIA_ATTR,\n        ATTR_WHITESPACE: ATTR_WHITESPACE,\n        CUSTOM_ELEMENT: CUSTOM_ELEMENT,\n        DATA_ATTR: DATA_ATTR,\n        DOCTYPE_NAME: DOCTYPE_NAME,\n        ERB_EXPR: ERB_EXPR,\n        IS_ALLOWED_URI: IS_ALLOWED_URI,\n        IS_SCRIPT_OR_DATA: IS_SCRIPT_OR_DATA,\n        MUSTACHE_EXPR: MUSTACHE_EXPR,\n        TMPLIT_EXPR: TMPLIT_EXPR\n    });\n    /* eslint-disable @typescript-eslint/indent */ // https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\n    const NODE_TYPE = {\n        element: 1,\n        attribute: 2,\n        text: 3,\n        cdataSection: 4,\n        entityReference: 5,\n        // Deprecated\n        entityNode: 6,\n        // Deprecated\n        progressingInstruction: 7,\n        comment: 8,\n        document: 9,\n        documentType: 10,\n        documentFragment: 11,\n        notation: 12 // Deprecated\n    };\n    const getGlobal = function getGlobal() {\n        return typeof window === 'undefined' ? null : window;\n    };\n    /**\n   * Creates a no-op policy for internal use only.\n   * Don't export this function outside this module!\n   * @param trustedTypes The policy factory.\n   * @param purifyHostElement The Script element used to load DOMPurify (to determine policy name suffix).\n   * @return The policy created (or null, if Trusted Types\n   * are not supported or creating the policy failed).\n   */ const _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, purifyHostElement) {\n        if (typeof trustedTypes !== 'object' || typeof trustedTypes.createPolicy !== 'function') return null;\n        // Allow the callers to control the unique policy name\n        // by adding a data-tt-policy-suffix to the script element with the DOMPurify.\n        // Policy creation with duplicate names throws in Trusted Types.\n        let suffix = null;\n        const ATTR_NAME = 'data-tt-policy-suffix';\n        if (purifyHostElement && purifyHostElement.hasAttribute(ATTR_NAME)) suffix = purifyHostElement.getAttribute(ATTR_NAME);\n        const policyName = 'dompurify' + (suffix ? '#' + suffix : '');\n        try {\n            return trustedTypes.createPolicy(policyName, {\n                createHTML (html) {\n                    return html;\n                },\n                createScriptURL (scriptUrl) {\n                    return scriptUrl;\n                }\n            });\n        } catch (_) {\n            // Policy creation failed (most likely another DOMPurify script has\n            // already run). Skip creating the policy, as this will only cause errors\n            // if TT are enforced.\n            console.warn('TrustedTypes policy ' + policyName + ' could not be created.');\n            return null;\n        }\n    };\n    const _createHooksMap = function _createHooksMap() {\n        return {\n            afterSanitizeAttributes: [],\n            afterSanitizeElements: [],\n            afterSanitizeShadowDOM: [],\n            beforeSanitizeAttributes: [],\n            beforeSanitizeElements: [],\n            beforeSanitizeShadowDOM: [],\n            uponSanitizeAttribute: [],\n            uponSanitizeElement: [],\n            uponSanitizeShadowNode: []\n        };\n    };\n    function createDOMPurify() {\n        let window1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();\n        const DOMPurify = (root)=>createDOMPurify(root);\n        DOMPurify.version = '3.2.4';\n        DOMPurify.removed = [];\n        if (!window1 || !window1.document || window1.document.nodeType !== NODE_TYPE.document || !window1.Element) {\n            // Not running in a browser, provide a factory function\n            // so that you can pass your own Window\n            DOMPurify.isSupported = false;\n            return DOMPurify;\n        }\n        let { document: document } = window1;\n        const originalDocument = document;\n        const currentScript = originalDocument.currentScript;\n        const { DocumentFragment: DocumentFragment, HTMLTemplateElement: HTMLTemplateElement, Node: Node, Element: Element, NodeFilter: NodeFilter, NamedNodeMap: NamedNodeMap = window1.NamedNodeMap || window1.MozNamedAttrMap, HTMLFormElement: HTMLFormElement, DOMParser: DOMParser, trustedTypes: trustedTypes } = window1;\n        const ElementPrototype = Element.prototype;\n        const cloneNode = lookupGetter(ElementPrototype, 'cloneNode');\n        const remove = lookupGetter(ElementPrototype, 'remove');\n        const getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');\n        const getChildNodes = lookupGetter(ElementPrototype, 'childNodes');\n        const getParentNode = lookupGetter(ElementPrototype, 'parentNode');\n        // As per issue #47, the web-components registry is inherited by a\n        // new document created via createHTMLDocument. As per the spec\n        // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\n        // a new empty registry is used when creating a template contents owner\n        // document, so we use that as our parent document to ensure nothing\n        // is inherited.\n        if (typeof HTMLTemplateElement === 'function') {\n            const template = document.createElement('template');\n            if (template.content && template.content.ownerDocument) document = template.content.ownerDocument;\n        }\n        let trustedTypesPolicy;\n        let emptyHTML = '';\n        const { implementation: implementation, createNodeIterator: createNodeIterator, createDocumentFragment: createDocumentFragment, getElementsByTagName: getElementsByTagName } = document;\n        const { importNode: importNode } = originalDocument;\n        let hooks = _createHooksMap();\n        /**\n     * Expose whether this browser supports running the full DOMPurify.\n     */ DOMPurify.isSupported = typeof entries === 'function' && typeof getParentNode === 'function' && implementation && implementation.createHTMLDocument !== undefined;\n        const { MUSTACHE_EXPR: MUSTACHE_EXPR, ERB_EXPR: ERB_EXPR, TMPLIT_EXPR: TMPLIT_EXPR, DATA_ATTR: DATA_ATTR, ARIA_ATTR: ARIA_ATTR, IS_SCRIPT_OR_DATA: IS_SCRIPT_OR_DATA, ATTR_WHITESPACE: ATTR_WHITESPACE, CUSTOM_ELEMENT: CUSTOM_ELEMENT } = EXPRESSIONS;\n        let { IS_ALLOWED_URI: IS_ALLOWED_URI$1 } = EXPRESSIONS;\n        /**\n     * We consider the elements and attributes below to be safe. Ideally\n     * don't add any new ones but feel free to remove unwanted ones.\n     */ /* allowed element names */ let ALLOWED_TAGS = null;\n        const DEFAULT_ALLOWED_TAGS = addToSet({}, [\n            ...html$1,\n            ...svg$1,\n            ...svgFilters,\n            ...mathMl$1,\n            ...text\n        ]);\n        /* Allowed attribute names */ let ALLOWED_ATTR = null;\n        const DEFAULT_ALLOWED_ATTR = addToSet({}, [\n            ...html,\n            ...svg,\n            ...mathMl,\n            ...xml\n        ]);\n        /*\n     * Configure how DOMPurify should handle custom elements and their attributes as well as customized built-in elements.\n     * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)\n     * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)\n     * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.\n     */ let CUSTOM_ELEMENT_HANDLING = Object.seal(create(null, {\n            tagNameCheck: {\n                writable: true,\n                configurable: false,\n                enumerable: true,\n                value: null\n            },\n            attributeNameCheck: {\n                writable: true,\n                configurable: false,\n                enumerable: true,\n                value: null\n            },\n            allowCustomizedBuiltInElements: {\n                writable: true,\n                configurable: false,\n                enumerable: true,\n                value: false\n            }\n        }));\n        /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */ let FORBID_TAGS = null;\n        /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */ let FORBID_ATTR = null;\n        /* Decide if ARIA attributes are okay */ let ALLOW_ARIA_ATTR = true;\n        /* Decide if custom data attributes are okay */ let ALLOW_DATA_ATTR = true;\n        /* Decide if unknown protocols are okay */ let ALLOW_UNKNOWN_PROTOCOLS = false;\n        /* Decide if self-closing tags in attributes are allowed.\n     * Usually removed due to a mXSS issue in jQuery 3.0 */ let ALLOW_SELF_CLOSE_IN_ATTR = true;\n        /* Output should be safe for common template engines.\n     * This means, DOMPurify removes data attributes, mustaches and ERB\n     */ let SAFE_FOR_TEMPLATES = false;\n        /* Output should be safe even for XML used within HTML and alike.\n     * This means, DOMPurify removes comments when containing risky content.\n     */ let SAFE_FOR_XML = true;\n        /* Decide if document with <html>... should be returned */ let WHOLE_DOCUMENT = false;\n        /* Track whether config is already set on this instance of DOMPurify. */ let SET_CONFIG = false;\n        /* Decide if all elements (e.g. style, script) must be children of\n     * document.body. By default, browsers might move them to document.head */ let FORCE_BODY = false;\n        /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html\n     * string (or a TrustedHTML object if Trusted Types are supported).\n     * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\n     */ let RETURN_DOM = false;\n        /* Decide if a DOM `DocumentFragment` should be returned, instead of a html\n     * string  (or a TrustedHTML object if Trusted Types are supported) */ let RETURN_DOM_FRAGMENT = false;\n        /* Try to return a Trusted Type object instead of a string, return a string in\n     * case Trusted Types are not supported  */ let RETURN_TRUSTED_TYPE = false;\n        /* Output should be free from DOM clobbering attacks?\n     * This sanitizes markups named with colliding, clobberable built-in DOM APIs.\n     */ let SANITIZE_DOM = true;\n        /* Achieve full DOM Clobbering protection by isolating the namespace of named\n     * properties and JS variables, mitigating attacks that abuse the HTML/DOM spec rules.\n     *\n     * HTML/DOM spec rules that enable DOM Clobbering:\n     *   - Named Access on Window (§7.3.3)\n     *   - DOM Tree Accessors (§3.1.5)\n     *   - Form Element Parent-Child Relations (§4.10.3)\n     *   - Iframe srcdoc / Nested WindowProxies (§4.8.5)\n     *   - HTMLCollection (§4.2.10.2)\n     *\n     * Namespace isolation is implemented by prefixing `id` and `name` attributes\n     * with a constant string, i.e., `user-content-`\n     */ let SANITIZE_NAMED_PROPS = false;\n        const SANITIZE_NAMED_PROPS_PREFIX = 'user-content-';\n        /* Keep element content when removing element? */ let KEEP_CONTENT = true;\n        /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead\n     * of importing it into a new Document and returning a sanitized copy */ let IN_PLACE = false;\n        /* Allow usage of profiles like html, svg and mathMl */ let USE_PROFILES = {};\n        /* Tags to ignore content of when KEEP_CONTENT is true */ let FORBID_CONTENTS = null;\n        const DEFAULT_FORBID_CONTENTS = addToSet({}, [\n            'annotation-xml',\n            'audio',\n            'colgroup',\n            'desc',\n            'foreignobject',\n            'head',\n            'iframe',\n            'math',\n            'mi',\n            'mn',\n            'mo',\n            'ms',\n            'mtext',\n            'noembed',\n            'noframes',\n            'noscript',\n            'plaintext',\n            'script',\n            'style',\n            'svg',\n            'template',\n            'thead',\n            'title',\n            'video',\n            'xmp'\n        ]);\n        /* Tags that are safe for data: URIs */ let DATA_URI_TAGS = null;\n        const DEFAULT_DATA_URI_TAGS = addToSet({}, [\n            'audio',\n            'video',\n            'img',\n            'source',\n            'image',\n            'track'\n        ]);\n        /* Attributes safe for values like \"javascript:\" */ let URI_SAFE_ATTRIBUTES = null;\n        const DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, [\n            'alt',\n            'class',\n            'for',\n            'id',\n            'label',\n            'name',\n            'pattern',\n            'placeholder',\n            'role',\n            'summary',\n            'title',\n            'value',\n            'style',\n            'xmlns'\n        ]);\n        const MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\n        const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n        const HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';\n        /* Document namespace */ let NAMESPACE = HTML_NAMESPACE;\n        let IS_EMPTY_INPUT = false;\n        /* Allowed XHTML+XML namespaces */ let ALLOWED_NAMESPACES = null;\n        const DEFAULT_ALLOWED_NAMESPACES = addToSet({}, [\n            MATHML_NAMESPACE,\n            SVG_NAMESPACE,\n            HTML_NAMESPACE\n        ], stringToString);\n        let MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, [\n            'mi',\n            'mo',\n            'mn',\n            'ms',\n            'mtext'\n        ]);\n        let HTML_INTEGRATION_POINTS = addToSet({}, [\n            'annotation-xml'\n        ]);\n        // Certain elements are allowed in both SVG and HTML\n        // namespace. We need to specify them explicitly\n        // so that they don't get erroneously deleted from\n        // HTML namespace.\n        const COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, [\n            'title',\n            'style',\n            'font',\n            'a',\n            'script'\n        ]);\n        /* Parsing of strict XHTML documents */ let PARSER_MEDIA_TYPE = null;\n        const SUPPORTED_PARSER_MEDIA_TYPES = [\n            'application/xhtml+xml',\n            'text/html'\n        ];\n        const DEFAULT_PARSER_MEDIA_TYPE = 'text/html';\n        let transformCaseFunc = null;\n        /* Keep a reference to config to pass to hooks */ let CONFIG = null;\n        /* Ideally, do not touch anything below this line */ /* ______________________________________________ */ const formElement = document.createElement('form');\n        const isRegexOrFunction = function isRegexOrFunction(testValue) {\n            return testValue instanceof RegExp || testValue instanceof Function;\n        };\n        /**\n     * _parseConfig\n     *\n     * @param cfg optional config literal\n     */ // eslint-disable-next-line complexity\n        const _parseConfig = function _parseConfig() {\n            let cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            if (CONFIG && CONFIG === cfg) return;\n            /* Shield configuration object from tampering */ if (!cfg || typeof cfg !== 'object') cfg = {};\n            /* Shield configuration object from prototype pollution */ cfg = clone(cfg);\n            PARSER_MEDIA_TYPE = // eslint-disable-next-line unicorn/prefer-includes\n            SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? DEFAULT_PARSER_MEDIA_TYPE : cfg.PARSER_MEDIA_TYPE;\n            // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.\n            transformCaseFunc = PARSER_MEDIA_TYPE === 'application/xhtml+xml' ? stringToString : stringToLowerCase;\n            /* Set configuration parameters */ ALLOWED_TAGS = objectHasOwnProperty(cfg, 'ALLOWED_TAGS') ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;\n            ALLOWED_ATTR = objectHasOwnProperty(cfg, 'ALLOWED_ATTR') ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;\n            ALLOWED_NAMESPACES = objectHasOwnProperty(cfg, 'ALLOWED_NAMESPACES') ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString) : DEFAULT_ALLOWED_NAMESPACES;\n            URI_SAFE_ATTRIBUTES = objectHasOwnProperty(cfg, 'ADD_URI_SAFE_ATTR') ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR, transformCaseFunc) : DEFAULT_URI_SAFE_ATTRIBUTES;\n            DATA_URI_TAGS = objectHasOwnProperty(cfg, 'ADD_DATA_URI_TAGS') ? addToSet(clone(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS, transformCaseFunc) : DEFAULT_DATA_URI_TAGS;\n            FORBID_CONTENTS = objectHasOwnProperty(cfg, 'FORBID_CONTENTS') ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;\n            FORBID_TAGS = objectHasOwnProperty(cfg, 'FORBID_TAGS') ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : {};\n            FORBID_ATTR = objectHasOwnProperty(cfg, 'FORBID_ATTR') ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : {};\n            USE_PROFILES = objectHasOwnProperty(cfg, 'USE_PROFILES') ? cfg.USE_PROFILES : false;\n            ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\n            ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\n            ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\n            ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false; // Default true\n            SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\n            SAFE_FOR_XML = cfg.SAFE_FOR_XML !== false; // Default true\n            WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\n            RETURN_DOM = cfg.RETURN_DOM || false; // Default false\n            RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\n            RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false\n            FORCE_BODY = cfg.FORCE_BODY || false; // Default false\n            SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\n            SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false; // Default false\n            KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\n            IN_PLACE = cfg.IN_PLACE || false; // Default false\n            IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI;\n            NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;\n            MATHML_TEXT_INTEGRATION_POINTS = cfg.MATHML_TEXT_INTEGRATION_POINTS || MATHML_TEXT_INTEGRATION_POINTS;\n            HTML_INTEGRATION_POINTS = cfg.HTML_INTEGRATION_POINTS || HTML_INTEGRATION_POINTS;\n            CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};\n            if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;\n            if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;\n            if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === 'boolean') CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;\n            if (SAFE_FOR_TEMPLATES) ALLOW_DATA_ATTR = false;\n            if (RETURN_DOM_FRAGMENT) RETURN_DOM = true;\n            /* Parse profile info */ if (USE_PROFILES) {\n                ALLOWED_TAGS = addToSet({}, text);\n                ALLOWED_ATTR = [];\n                if (USE_PROFILES.html === true) {\n                    addToSet(ALLOWED_TAGS, html$1);\n                    addToSet(ALLOWED_ATTR, html);\n                }\n                if (USE_PROFILES.svg === true) {\n                    addToSet(ALLOWED_TAGS, svg$1);\n                    addToSet(ALLOWED_ATTR, svg);\n                    addToSet(ALLOWED_ATTR, xml);\n                }\n                if (USE_PROFILES.svgFilters === true) {\n                    addToSet(ALLOWED_TAGS, svgFilters);\n                    addToSet(ALLOWED_ATTR, svg);\n                    addToSet(ALLOWED_ATTR, xml);\n                }\n                if (USE_PROFILES.mathMl === true) {\n                    addToSet(ALLOWED_TAGS, mathMl$1);\n                    addToSet(ALLOWED_ATTR, mathMl);\n                    addToSet(ALLOWED_ATTR, xml);\n                }\n            }\n            /* Merge configuration parameters */ if (cfg.ADD_TAGS) {\n                if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) ALLOWED_TAGS = clone(ALLOWED_TAGS);\n                addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);\n            }\n            if (cfg.ADD_ATTR) {\n                if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) ALLOWED_ATTR = clone(ALLOWED_ATTR);\n                addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);\n            }\n            if (cfg.ADD_URI_SAFE_ATTR) addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);\n            if (cfg.FORBID_CONTENTS) {\n                if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) FORBID_CONTENTS = clone(FORBID_CONTENTS);\n                addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);\n            }\n            /* Add #text in case KEEP_CONTENT is set to true */ if (KEEP_CONTENT) ALLOWED_TAGS['#text'] = true;\n            /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */ if (WHOLE_DOCUMENT) addToSet(ALLOWED_TAGS, [\n                'html',\n                'head',\n                'body'\n            ]);\n            /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */ if (ALLOWED_TAGS.table) {\n                addToSet(ALLOWED_TAGS, [\n                    'tbody'\n                ]);\n                delete FORBID_TAGS.tbody;\n            }\n            if (cfg.TRUSTED_TYPES_POLICY) {\n                if (typeof cfg.TRUSTED_TYPES_POLICY.createHTML !== 'function') throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a \"createHTML\" hook.');\n                if (typeof cfg.TRUSTED_TYPES_POLICY.createScriptURL !== 'function') throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a \"createScriptURL\" hook.');\n                // Overwrite existing TrustedTypes policy.\n                trustedTypesPolicy = cfg.TRUSTED_TYPES_POLICY;\n                // Sign local variables required by `sanitize`.\n                emptyHTML = trustedTypesPolicy.createHTML('');\n            } else {\n                // Uninitialized policy, attempt to initialize the internal dompurify policy.\n                if (trustedTypesPolicy === undefined) trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, currentScript);\n                // If creating the internal policy succeeded sign internal variables.\n                if (trustedTypesPolicy !== null && typeof emptyHTML === 'string') emptyHTML = trustedTypesPolicy.createHTML('');\n            }\n            // Prevent further manipulation of configuration.\n            // Not available in IE8, Safari 5, etc.\n            if (freeze) freeze(cfg);\n            CONFIG = cfg;\n        };\n        /* Keep track of all possible SVG and MathML tags\n     * so that we can perform the namespace checks\n     * correctly. */ const ALL_SVG_TAGS = addToSet({}, [\n            ...svg$1,\n            ...svgFilters,\n            ...svgDisallowed\n        ]);\n        const ALL_MATHML_TAGS = addToSet({}, [\n            ...mathMl$1,\n            ...mathMlDisallowed\n        ]);\n        /**\n     * @param element a DOM element whose namespace is being checked\n     * @returns Return false if the element has a\n     *  namespace that a spec-compliant parser would never\n     *  return. Return true otherwise.\n     */ const _checkValidNamespace = function _checkValidNamespace(element) {\n            let parent = getParentNode(element);\n            // In JSDOM, if we're inside shadow DOM, then parentNode\n            // can be null. We just simulate parent in this case.\n            if (!parent || !parent.tagName) parent = {\n                namespaceURI: NAMESPACE,\n                tagName: 'template'\n            };\n            const tagName = stringToLowerCase(element.tagName);\n            const parentTagName = stringToLowerCase(parent.tagName);\n            if (!ALLOWED_NAMESPACES[element.namespaceURI]) return false;\n            if (element.namespaceURI === SVG_NAMESPACE) {\n                // The only way to switch from HTML namespace to SVG\n                // is via <svg>. If it happens via any other tag, then\n                // it should be killed.\n                if (parent.namespaceURI === HTML_NAMESPACE) return tagName === 'svg';\n                // The only way to switch from MathML to SVG is via`\n                // svg if parent is either <annotation-xml> or MathML\n                // text integration points.\n                if (parent.namespaceURI === MATHML_NAMESPACE) return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);\n                // We only allow elements that are defined in SVG\n                // spec. All others are disallowed in SVG namespace.\n                return Boolean(ALL_SVG_TAGS[tagName]);\n            }\n            if (element.namespaceURI === MATHML_NAMESPACE) {\n                // The only way to switch from HTML namespace to MathML\n                // is via <math>. If it happens via any other tag, then\n                // it should be killed.\n                if (parent.namespaceURI === HTML_NAMESPACE) return tagName === 'math';\n                // The only way to switch from SVG to MathML is via\n                // <math> and HTML integration points\n                if (parent.namespaceURI === SVG_NAMESPACE) return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];\n                // We only allow elements that are defined in MathML\n                // spec. All others are disallowed in MathML namespace.\n                return Boolean(ALL_MATHML_TAGS[tagName]);\n            }\n            if (element.namespaceURI === HTML_NAMESPACE) {\n                // The only way to switch from SVG to HTML is via\n                // HTML integration points, and from MathML to HTML\n                // is via MathML text integration points\n                if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) return false;\n                if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) return false;\n                // We disallow tags that are specific for MathML\n                // or SVG and should never appear in HTML namespace\n                return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);\n            }\n            // For XHTML and XML documents that support custom namespaces\n            if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && ALLOWED_NAMESPACES[element.namespaceURI]) return true;\n            // The code should never reach this place (this means\n            // that the element somehow got namespace that is not\n            // HTML, SVG, MathML or allowed via ALLOWED_NAMESPACES).\n            // Return false just in case.\n            return false;\n        };\n        /**\n     * _forceRemove\n     *\n     * @param node a DOM node\n     */ const _forceRemove = function _forceRemove(node) {\n            arrayPush(DOMPurify.removed, {\n                element: node\n            });\n            try {\n                // eslint-disable-next-line unicorn/prefer-dom-node-remove\n                getParentNode(node).removeChild(node);\n            } catch (_) {\n                remove(node);\n            }\n        };\n        /**\n     * _removeAttribute\n     *\n     * @param name an Attribute name\n     * @param element a DOM node\n     */ const _removeAttribute = function _removeAttribute(name, element) {\n            try {\n                arrayPush(DOMPurify.removed, {\n                    attribute: element.getAttributeNode(name),\n                    from: element\n                });\n            } catch (_) {\n                arrayPush(DOMPurify.removed, {\n                    attribute: null,\n                    from: element\n                });\n            }\n            element.removeAttribute(name);\n            // We void attribute values for unremovable \"is\" attributes\n            if (name === 'is') {\n                if (RETURN_DOM || RETURN_DOM_FRAGMENT) try {\n                    _forceRemove(element);\n                } catch (_) {}\n                else try {\n                    element.setAttribute(name, '');\n                } catch (_) {}\n            }\n        };\n        /**\n     * _initDocument\n     *\n     * @param dirty - a string of dirty markup\n     * @return a DOM, filled with the dirty markup\n     */ const _initDocument = function _initDocument(dirty) {\n            /* Create a HTML document */ let doc = null;\n            let leadingWhitespace = null;\n            if (FORCE_BODY) dirty = '<remove></remove>' + dirty;\n            else {\n                /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */ const matches = stringMatch(dirty, /^[\\r\\n\\t ]+/);\n                leadingWhitespace = matches && matches[0];\n            }\n            if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && NAMESPACE === HTML_NAMESPACE) // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)\n            dirty = '<html xmlns=\"http://www.w3.org/1999/xhtml\"><head></head><body>' + dirty + '</body></html>';\n            const dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;\n            /*\n       * Use the DOMParser API by default, fallback later if needs be\n       * DOMParser not work for svg when has multiple root element.\n       */ if (NAMESPACE === HTML_NAMESPACE) try {\n                doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);\n            } catch (_) {}\n            /* Use createHTMLDocument in case DOMParser is not available */ if (!doc || !doc.documentElement) {\n                doc = implementation.createDocument(NAMESPACE, 'template', null);\n                try {\n                    doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;\n                } catch (_) {\n                // Syntax error if dirtyPayload is invalid xml\n                }\n            }\n            const body = doc.body || doc.documentElement;\n            if (dirty && leadingWhitespace) body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);\n            /* Work on whole document or just its body */ if (NAMESPACE === HTML_NAMESPACE) return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];\n            return WHOLE_DOCUMENT ? doc.documentElement : body;\n        };\n        /**\n     * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.\n     *\n     * @param root The root element or node to start traversing on.\n     * @return The created NodeIterator\n     */ const _createNodeIterator = function _createNodeIterator(root) {\n            return createNodeIterator.call(root.ownerDocument || root, root, // eslint-disable-next-line no-bitwise\n            NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT | NodeFilter.SHOW_PROCESSING_INSTRUCTION | NodeFilter.SHOW_CDATA_SECTION, null);\n        };\n        /**\n     * _isClobbered\n     *\n     * @param element element to check for clobbering attacks\n     * @return true if clobbered, false if safe\n     */ const _isClobbered = function _isClobbered(element) {\n            return element instanceof HTMLFormElement && (typeof element.nodeName !== 'string' || typeof element.textContent !== 'string' || typeof element.removeChild !== 'function' || !(element.attributes instanceof NamedNodeMap) || typeof element.removeAttribute !== 'function' || typeof element.setAttribute !== 'function' || typeof element.namespaceURI !== 'string' || typeof element.insertBefore !== 'function' || typeof element.hasChildNodes !== 'function');\n        };\n        /**\n     * Checks whether the given object is a DOM node.\n     *\n     * @param value object to check whether it's a DOM node\n     * @return true is object is a DOM node\n     */ const _isNode = function _isNode(value) {\n            return typeof Node === 'function' && value instanceof Node;\n        };\n        function _executeHooks(hooks, currentNode, data) {\n            arrayForEach(hooks, (hook)=>{\n                hook.call(DOMPurify, currentNode, data, CONFIG);\n            });\n        }\n        /**\n     * _sanitizeElements\n     *\n     * @protect nodeName\n     * @protect textContent\n     * @protect removeChild\n     * @param currentNode to check for permission to exist\n     * @return true if node was killed, false if left alive\n     */ const _sanitizeElements = function _sanitizeElements(currentNode) {\n            let content = null;\n            /* Execute a hook if present */ _executeHooks(hooks.beforeSanitizeElements, currentNode, null);\n            /* Check if element is clobbered or can clobber */ if (_isClobbered(currentNode)) {\n                _forceRemove(currentNode);\n                return true;\n            }\n            /* Now let's check the element's type and name */ const tagName = transformCaseFunc(currentNode.nodeName);\n            /* Execute a hook if present */ _executeHooks(hooks.uponSanitizeElement, currentNode, {\n                tagName: tagName,\n                allowedTags: ALLOWED_TAGS\n            });\n            /* Detect mXSS attempts abusing namespace confusion */ if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && regExpTest(/<[/\\w]/g, currentNode.innerHTML) && regExpTest(/<[/\\w]/g, currentNode.textContent)) {\n                _forceRemove(currentNode);\n                return true;\n            }\n            /* Remove any occurrence of processing instructions */ if (currentNode.nodeType === NODE_TYPE.progressingInstruction) {\n                _forceRemove(currentNode);\n                return true;\n            }\n            /* Remove any kind of possibly harmful comments */ if (SAFE_FOR_XML && currentNode.nodeType === NODE_TYPE.comment && regExpTest(/<[/\\w]/g, currentNode.data)) {\n                _forceRemove(currentNode);\n                return true;\n            }\n            /* Remove element if anything forbids its presence */ if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n                /* Check if we have a custom element to handle */ if (!FORBID_TAGS[tagName] && _isBasicCustomElement(tagName)) {\n                    if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) return false;\n                    if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) return false;\n                }\n                /* Keep content except for bad-listed elements */ if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {\n                    const parentNode = getParentNode(currentNode) || currentNode.parentNode;\n                    const childNodes = getChildNodes(currentNode) || currentNode.childNodes;\n                    if (childNodes && parentNode) {\n                        const childCount = childNodes.length;\n                        for(let i = childCount - 1; i >= 0; --i){\n                            const childClone = cloneNode(childNodes[i], true);\n                            childClone.__removalCount = (currentNode.__removalCount || 0) + 1;\n                            parentNode.insertBefore(childClone, getNextSibling(currentNode));\n                        }\n                    }\n                }\n                _forceRemove(currentNode);\n                return true;\n            }\n            /* Check whether element has a valid namespace */ if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {\n                _forceRemove(currentNode);\n                return true;\n            }\n            /* Make sure that older browsers don't get fallback-tag mXSS */ if ((tagName === 'noscript' || tagName === 'noembed' || tagName === 'noframes') && regExpTest(/<\\/no(script|embed|frames)/i, currentNode.innerHTML)) {\n                _forceRemove(currentNode);\n                return true;\n            }\n            /* Sanitize element content to be template-safe */ if (SAFE_FOR_TEMPLATES && currentNode.nodeType === NODE_TYPE.text) {\n                /* Get the element's text content */ content = currentNode.textContent;\n                arrayForEach([\n                    MUSTACHE_EXPR,\n                    ERB_EXPR,\n                    TMPLIT_EXPR\n                ], (expr)=>{\n                    content = stringReplace(content, expr, ' ');\n                });\n                if (currentNode.textContent !== content) {\n                    arrayPush(DOMPurify.removed, {\n                        element: currentNode.cloneNode()\n                    });\n                    currentNode.textContent = content;\n                }\n            }\n            /* Execute a hook if present */ _executeHooks(hooks.afterSanitizeElements, currentNode, null);\n            return false;\n        };\n        /**\n     * _isValidAttribute\n     *\n     * @param lcTag Lowercase tag name of containing element.\n     * @param lcName Lowercase attribute name.\n     * @param value Attribute value.\n     * @return Returns true if `value` is valid, otherwise false.\n     */ // eslint-disable-next-line complexity\n        const _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {\n            /* Make sure attribute cannot clobber */ if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) return false;\n            /* Allow valid data-* attributes: At least one character after \"-\"\n          (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\n          XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\n          We don't need to check the value; it's always URI safe. */ if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR, lcName)) ;\n            else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR, lcName)) ;\n            else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\n                if (// First condition does a very basic check if a) it's basically a valid custom element tagname AND\n                // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n                // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck\n                _isBasicCustomElement(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) || // Alternative, second condition checks if it's an `is`-attribute, AND\n                // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n                lcName === 'is' && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))) ;\n                else return false;\n            /* Check value is safe. First, is attr inert? If so, is safe */ } else if (URI_SAFE_ATTRIBUTES[lcName]) ;\n            else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE, ''))) ;\n            else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ;\n            else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA, stringReplace(value, ATTR_WHITESPACE, ''))) ;\n            else if (value) return false;\n            return true;\n        };\n        /**\n     * _isBasicCustomElement\n     * checks if at least one dash is included in tagName, and it's not the first char\n     * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name\n     *\n     * @param tagName name of the tag of the node to sanitize\n     * @returns Returns true if the tag name meets the basic criteria for a custom element, otherwise false.\n     */ const _isBasicCustomElement = function _isBasicCustomElement(tagName) {\n            return tagName !== 'annotation-xml' && stringMatch(tagName, CUSTOM_ELEMENT);\n        };\n        /**\n     * _sanitizeAttributes\n     *\n     * @protect attributes\n     * @protect nodeName\n     * @protect removeAttribute\n     * @protect setAttribute\n     *\n     * @param currentNode to sanitize\n     */ const _sanitizeAttributes = function _sanitizeAttributes(currentNode) {\n            /* Execute a hook if present */ _executeHooks(hooks.beforeSanitizeAttributes, currentNode, null);\n            const { attributes: attributes } = currentNode;\n            /* Check if we have attributes; if not we might have a text node */ if (!attributes || _isClobbered(currentNode)) return;\n            const hookEvent = {\n                attrName: '',\n                attrValue: '',\n                keepAttr: true,\n                allowedAttributes: ALLOWED_ATTR,\n                forceKeepAttr: undefined\n            };\n            let l = attributes.length;\n            /* Go backwards over all attributes; safely remove bad ones */ while(l--){\n                const attr = attributes[l];\n                const { name: name, namespaceURI: namespaceURI, value: attrValue } = attr;\n                const lcName = transformCaseFunc(name);\n                let value = name === 'value' ? attrValue : stringTrim(attrValue);\n                /* Execute a hook if present */ hookEvent.attrName = lcName;\n                hookEvent.attrValue = value;\n                hookEvent.keepAttr = true;\n                hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set\n                _executeHooks(hooks.uponSanitizeAttribute, currentNode, hookEvent);\n                value = hookEvent.attrValue;\n                /* Full DOM Clobbering protection via namespace isolation,\n         * Prefix id and name attributes with `user-content-`\n         */ if (SANITIZE_NAMED_PROPS && (lcName === 'id' || lcName === 'name')) {\n                    // Remove the attribute with this value\n                    _removeAttribute(name, currentNode);\n                    // Prefix the value and later re-create the attribute with the sanitized value\n                    value = SANITIZE_NAMED_PROPS_PREFIX + value;\n                }\n                /* Work around a security issue with comments inside attributes */ if (SAFE_FOR_XML && regExpTest(/((--!?|])>)|<\\/(style|title)/i, value)) {\n                    _removeAttribute(name, currentNode);\n                    continue;\n                }\n                /* Did the hooks approve of the attribute? */ if (hookEvent.forceKeepAttr) continue;\n                /* Remove attribute */ _removeAttribute(name, currentNode);\n                /* Did the hooks approve of the attribute? */ if (!hookEvent.keepAttr) continue;\n                /* Work around a security issue in jQuery 3.0 */ if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\\/>/i, value)) {\n                    _removeAttribute(name, currentNode);\n                    continue;\n                }\n                /* Sanitize attribute content to be template-safe */ if (SAFE_FOR_TEMPLATES) arrayForEach([\n                    MUSTACHE_EXPR,\n                    ERB_EXPR,\n                    TMPLIT_EXPR\n                ], (expr)=>{\n                    value = stringReplace(value, expr, ' ');\n                });\n                /* Is `value` valid for this attribute? */ const lcTag = transformCaseFunc(currentNode.nodeName);\n                if (!_isValidAttribute(lcTag, lcName, value)) continue;\n                /* Handle attributes that require Trusted Types */ if (trustedTypesPolicy && typeof trustedTypes === 'object' && typeof trustedTypes.getAttributeType === 'function') {\n                    if (namespaceURI) ;\n                    else switch(trustedTypes.getAttributeType(lcTag, lcName)){\n                        case 'TrustedHTML':\n                            value = trustedTypesPolicy.createHTML(value);\n                            break;\n                        case 'TrustedScriptURL':\n                            value = trustedTypesPolicy.createScriptURL(value);\n                            break;\n                    }\n                }\n                /* Handle invalid data-* attribute set by try-catching it */ try {\n                    if (namespaceURI) currentNode.setAttributeNS(namespaceURI, name, value);\n                    else /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. \"x-schema\". */ currentNode.setAttribute(name, value);\n                    if (_isClobbered(currentNode)) _forceRemove(currentNode);\n                    else arrayPop(DOMPurify.removed);\n                } catch (_) {}\n            }\n            /* Execute a hook if present */ _executeHooks(hooks.afterSanitizeAttributes, currentNode, null);\n        };\n        /**\n     * _sanitizeShadowDOM\n     *\n     * @param fragment to iterate over recursively\n     */ const _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {\n            let shadowNode = null;\n            const shadowIterator = _createNodeIterator(fragment);\n            /* Execute a hook if present */ _executeHooks(hooks.beforeSanitizeShadowDOM, fragment, null);\n            while(shadowNode = shadowIterator.nextNode()){\n                /* Execute a hook if present */ _executeHooks(hooks.uponSanitizeShadowNode, shadowNode, null);\n                /* Sanitize tags and elements */ _sanitizeElements(shadowNode);\n                /* Check attributes next */ _sanitizeAttributes(shadowNode);\n                /* Deep shadow DOM detected */ if (shadowNode.content instanceof DocumentFragment) _sanitizeShadowDOM(shadowNode.content);\n            }\n            /* Execute a hook if present */ _executeHooks(hooks.afterSanitizeShadowDOM, fragment, null);\n        };\n        // eslint-disable-next-line complexity\n        DOMPurify.sanitize = function(dirty) {\n            let cfg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n            let body = null;\n            let importedNode = null;\n            let currentNode = null;\n            let returnNode = null;\n            /* Make sure we have a string to sanitize.\n        DO NOT return early, as this will return the wrong type if\n        the user has requested a DOM object rather than a string */ IS_EMPTY_INPUT = !dirty;\n            if (IS_EMPTY_INPUT) dirty = '<!-->';\n            /* Stringify, in case dirty is an object */ if (typeof dirty !== 'string' && !_isNode(dirty)) {\n                if (typeof dirty.toString === 'function') {\n                    dirty = dirty.toString();\n                    if (typeof dirty !== 'string') throw typeErrorCreate('dirty is not a string, aborting');\n                } else throw typeErrorCreate('toString is not a function');\n            }\n            /* Return dirty HTML if DOMPurify cannot run */ if (!DOMPurify.isSupported) return dirty;\n            /* Assign config vars */ if (!SET_CONFIG) _parseConfig(cfg);\n            /* Clean up removed elements */ DOMPurify.removed = [];\n            /* Check if dirty is correctly typed for IN_PLACE */ if (typeof dirty === 'string') IN_PLACE = false;\n            if (IN_PLACE) /* Do some early pre-sanitization to avoid unsafe root nodes */ {\n                if (dirty.nodeName) {\n                    const tagName = transformCaseFunc(dirty.nodeName);\n                    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) throw typeErrorCreate('root node is forbidden and cannot be sanitized in-place');\n                }\n            } else if (dirty instanceof Node) {\n                /* If dirty is a DOM element, append to an empty document to avoid\n           elements being stripped by the parser */ body = _initDocument('<!---->');\n                importedNode = body.ownerDocument.importNode(dirty, true);\n                if (importedNode.nodeType === NODE_TYPE.element && importedNode.nodeName === 'BODY') /* Node is already a body, use as is */ body = importedNode;\n                else if (importedNode.nodeName === 'HTML') body = importedNode;\n                else // eslint-disable-next-line unicorn/prefer-dom-node-append\n                body.appendChild(importedNode);\n            } else {\n                /* Exit directly if we have nothing to do */ if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && // eslint-disable-next-line unicorn/prefer-includes\n                dirty.indexOf('<') === -1) return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;\n                /* Initialize the document to work on */ body = _initDocument(dirty);\n                /* Check we have a DOM node from the data */ if (!body) return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : '';\n            }\n            /* Remove first element node (ours) if FORCE_BODY is set */ if (body && FORCE_BODY) _forceRemove(body.firstChild);\n            /* Get node iterator */ const nodeIterator = _createNodeIterator(IN_PLACE ? dirty : body);\n            /* Now start iterating over the created document */ while(currentNode = nodeIterator.nextNode()){\n                /* Sanitize tags and elements */ _sanitizeElements(currentNode);\n                /* Check attributes next */ _sanitizeAttributes(currentNode);\n                /* Shadow DOM detected, sanitize it */ if (currentNode.content instanceof DocumentFragment) _sanitizeShadowDOM(currentNode.content);\n            }\n            /* If we sanitized `dirty` in-place, return it. */ if (IN_PLACE) return dirty;\n            /* Return sanitized string or DOM */ if (RETURN_DOM) {\n                if (RETURN_DOM_FRAGMENT) {\n                    returnNode = createDocumentFragment.call(body.ownerDocument);\n                    while(body.firstChild)// eslint-disable-next-line unicorn/prefer-dom-node-append\n                    returnNode.appendChild(body.firstChild);\n                } else returnNode = body;\n                if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmode) /*\n            AdoptNode() is not used because internal state is not reset\n            (e.g. the past names map of a HTMLFormElement), this is safe\n            in theory but we would rather not risk another attack vector.\n            The state that is cloned by importNode() is explicitly defined\n            by the specs.\n          */ returnNode = importNode.call(originalDocument, returnNode, true);\n                return returnNode;\n            }\n            let serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\n            /* Serialize doctype if allowed */ if (WHOLE_DOCUMENT && ALLOWED_TAGS['!doctype'] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) serializedHTML = '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\\n' + serializedHTML;\n            /* Sanitize final string template-safe */ if (SAFE_FOR_TEMPLATES) arrayForEach([\n                MUSTACHE_EXPR,\n                ERB_EXPR,\n                TMPLIT_EXPR\n            ], (expr)=>{\n                serializedHTML = stringReplace(serializedHTML, expr, ' ');\n            });\n            return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;\n        };\n        DOMPurify.setConfig = function() {\n            let cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            _parseConfig(cfg);\n            SET_CONFIG = true;\n        };\n        DOMPurify.clearConfig = function() {\n            CONFIG = null;\n            SET_CONFIG = false;\n        };\n        DOMPurify.isValidAttribute = function(tag, attr, value) {\n            /* Initialize shared config vars if necessary. */ if (!CONFIG) _parseConfig({});\n            const lcTag = transformCaseFunc(tag);\n            const lcName = transformCaseFunc(attr);\n            return _isValidAttribute(lcTag, lcName, value);\n        };\n        DOMPurify.addHook = function(entryPoint, hookFunction) {\n            if (typeof hookFunction !== 'function') return;\n            arrayPush(hooks[entryPoint], hookFunction);\n        };\n        DOMPurify.removeHook = function(entryPoint, hookFunction) {\n            if (hookFunction !== undefined) {\n                const index = arrayLastIndexOf(hooks[entryPoint], hookFunction);\n                return index === -1 ? undefined : arraySplice(hooks[entryPoint], index, 1)[0];\n            }\n            return arrayPop(hooks[entryPoint]);\n        };\n        DOMPurify.removeHooks = function(entryPoint) {\n            hooks[entryPoint] = [];\n        };\n        DOMPurify.removeAllHooks = function() {\n            hooks = _createHooksMap();\n        };\n        return DOMPurify;\n    }\n    var purify = createDOMPurify();\n    return purify;\n});\n\n\nfunction $820877bea407f5fe$export$d529ba4b6bdbcf0c(input) {\n    if (!input) return '';\n    return (0, (/*@__PURE__*/$parcel$interopDefault($d349326c2b62c55f$exports))).sanitize(input, {\n        ALLOWED_TAGS: [],\n        ALLOWED_ATTR: []\n    }).trim();\n}\nfunction $820877bea407f5fe$export$c0fc46c8edd7094a(html) {\n    if (!html) return '';\n    return (0, (/*@__PURE__*/$parcel$interopDefault($d349326c2b62c55f$exports))).sanitize(html, {\n        ALLOWED_TAGS: [\n            'p',\n            'br',\n            'b',\n            'i',\n            'em',\n            'strong',\n            'u',\n            'ul',\n            'ol',\n            'li'\n        ],\n        ALLOWED_ATTR: []\n    });\n}\nfunction $820877bea407f5fe$export$3879b24e8245693d(message, elementId = 'error_container') {\n    const errorElement = document.getElementById(elementId);\n    if (errorElement) {\n        errorElement.textContent = $820877bea407f5fe$export$d529ba4b6bdbcf0c(message);\n        errorElement.classList.remove('hidden');\n        // Auto hide after 5 seconds\n        setTimeout(()=>{\n            errorElement.classList.add('hidden');\n        }, 5000);\n    } else console.error('Error:', message);\n}\nfunction $820877bea407f5fe$export$ed692cabb252e59b(formData) {\n    // Check for CV file\n    const cvFile = formData.get('cv_file');\n    if (!cvFile || cvFile.size === 0) return {\n        isValid: false,\n        errorMessage: 'Please upload your CV/resume file'\n    };\n    // Check job description - either text or image must be provided\n    const jobDescText = formData.get('job_desc_text');\n    const jobDescImage = formData.get('job_desc_image');\n    if ((!jobDescText || jobDescText.trim() === '') && (!jobDescImage || jobDescImage.size === 0)) return {\n        isValid: false,\n        errorMessage: 'Please provide either job description text or image'\n    };\n    return {\n        isValid: true,\n        errorMessage: ''\n    };\n}\n\n\n/**\n * Form handling functionality\n */ /**\n * Sets up all form-related event handlers\n */ function $0df1b74646f49493$export$c49cb68fcff57920() {\n    // Setup the API endpoint\n    $0df1b74646f49493$var$configureApiEndpoint();\n    // Handle job description type toggle\n    $0df1b74646f49493$var$setupJobDescriptionTypeToggle();\n    // Handle form submission\n    $0df1b74646f49493$var$setupFormValidation();\n    // Handle copy button\n    $0df1b74646f49493$var$setupCopyButton();\n}\n/**\n * Configures the API endpoint for form submission\n */ function $0df1b74646f49493$var$configureApiEndpoint() {\n    // Use a relative URL to hide the actual API domain\n    const apiEndpoint = '/api/generate_cover_letter';\n    // Set the hx-post attribute to the API endpoint\n    document.getElementById('cover_letter_form').setAttribute('hx-post', apiEndpoint);\n    // Log to confirm it's being set correctly\n    console.log('API endpoint set to:', apiEndpoint);\n}\n/**\n * Sets up the job description type toggle\n */ function $0df1b74646f49493$var$setupJobDescriptionTypeToggle() {\n    const radioButtons = document.querySelectorAll('input[name=\"job_desc_type\"]');\n    const textContainer = document.getElementById('job_desc_text_container');\n    const imageContainer = document.getElementById('job_desc_image_container');\n    // Initial state\n    $0df1b74646f49493$var$toggleDescriptionType(radioButtons);\n    // Add event listeners\n    radioButtons.forEach((radio)=>{\n        radio.addEventListener('change', ()=>$0df1b74646f49493$var$toggleDescriptionType(radioButtons));\n    });\n}\n/**\n * Toggle between text and image job description\n * @param {NodeList} radioButtons - The radio button elements\n */ function $0df1b74646f49493$var$toggleDescriptionType(radioButtons) {\n    const textContainer = document.getElementById('job_desc_text_container');\n    const imageContainer = document.getElementById('job_desc_image_container');\n    const textInput = document.getElementById('job_desc_text');\n    const imageInput = document.getElementById('job_desc_image');\n    if (document.querySelector('input[name=\"job_desc_type\"]:checked').value === 'text') {\n        // Show text container, hide image container\n        textContainer.classList.remove('hidden');\n        imageContainer.classList.add('hidden');\n        // Update required attributes\n        textInput.setAttribute('required', '');\n        imageInput.removeAttribute('required');\n    } else {\n        // Show image container, hide text container\n        textContainer.classList.add('hidden');\n        imageContainer.classList.remove('hidden');\n        // Update required attributes\n        textInput.removeAttribute('required');\n        imageInput.setAttribute('required', '');\n    }\n}\n/**\n * Sets up form validation before submission\n */ function $0df1b74646f49493$var$setupFormValidation() {\n    const form = document.getElementById('cover_letter_form');\n    const generateButton = document.getElementById('generate_btn');\n    // Prevent default form submission and handle it manually\n    form.addEventListener('submit', function(event) {\n        event.preventDefault();\n        // Show loading indicator\n        document.getElementById('cover_letter_loading').classList.remove('hidden');\n        // Set button to loading state\n        generateButton.classList.add('loading');\n        generateButton.disabled = true;\n        // Get form data\n        const formData = new FormData(form);\n        // Handle job description type - ensure only one type is sent\n        const jobDescType = document.querySelector('input[name=\"job_desc_type\"]:checked').value;\n        if (jobDescType === 'text') {\n            // Text mode - ensure job_desc_image is empty\n            formData.delete('job_desc_image');\n            // Make sure job_desc_text is not empty\n            if (!formData.get('job_desc_text') || formData.get('job_desc_text').trim() === '') {\n                window.appUtils.showError('Please enter a job description text');\n                // Reset button state\n                generateButton.classList.remove('loading');\n                generateButton.disabled = false;\n                // Hide loading indicator\n                document.getElementById('cover_letter_loading').classList.add('hidden');\n                return;\n            }\n        } else {\n            // Image mode - ensure job_desc_text is empty\n            formData.set('job_desc_text', '');\n            // Make sure job_desc_image is not empty\n            if (!formData.get('job_desc_image') || formData.get('job_desc_image').size === 0) {\n                window.appUtils.showError('Please upload a job description image');\n                // Reset button state\n                generateButton.classList.remove('loading');\n                generateButton.disabled = false;\n                // Hide loading indicator\n                document.getElementById('cover_letter_loading').classList.add('hidden');\n                return;\n            }\n        }\n        // Validate form\n        const validation = window.appUtils.validateForm(formData);\n        if (!validation.isValid) {\n            // Show error\n            window.appUtils.showError(validation.errorMessage);\n            // Hide loading indicator\n            document.getElementById('cover_letter_loading').classList.add('hidden');\n            // Reset button state\n            generateButton.classList.remove('loading');\n            generateButton.disabled = false;\n            return;\n        }\n        // Use a relative URL to hide the actual API domain\n        const apiEndpoint = '/api/generate_cover_letter';\n        // Submit form data directly using fetch\n        fetch(apiEndpoint, {\n            method: 'POST',\n            body: formData\n        }).then((response)=>{\n            if (!response.ok) throw new Error('Network response was not ok: ' + response.status);\n            return response.text();\n        }).then((data)=>{\n            // Update the editor with the generated cover letter\n            document.getElementById('cover_letter_editor').value = data;\n        }).catch((error)=>{\n            window.appUtils.showError('Network error: ' + error.message);\n        }).finally(()=>{\n            // Hide loading indicator\n            document.getElementById('cover_letter_loading').classList.add('hidden');\n            // Reset button state\n            generateButton.classList.remove('loading');\n            generateButton.disabled = false;\n        });\n    });\n    // We'll keep these event listeners for any HTMX fallback but they likely won't be used now\n    form.addEventListener('htmx:responseError', function(event) {\n        let errorMsg = 'Server error occurred. Please try again.';\n        // Try to parse response as JSON for more specific error\n        try {\n            const response = JSON.parse(event.detail.xhr.responseText);\n            if (response.error) errorMsg = response.error;\n        } catch (e) {\n        // If we can't parse JSON, use the generic error\n        }\n        window.appUtils.showError(errorMsg);\n    });\n    form.addEventListener('htmx:sendError', function() {\n        window.appUtils.showError('Network error. Please check your internet connection and try again.');\n    });\n}\n/**\n * Sets up the copy button functionality\n */ function $0df1b74646f49493$var$setupCopyButton() {\n    const copyButton = document.getElementById('copy_btn');\n    if (!copyButton) {\n        console.warn('Copy button element not found in the document');\n        return;\n    }\n    copyButton.addEventListener('click', function() {\n        const coverLetterContent = document.getElementById('cover_letter_editor');\n        if (coverLetterContent && coverLetterContent.value.trim() !== '') // Try to copy the text\n        try {\n            navigator.clipboard.writeText(coverLetterContent.value).then(()=>{\n                // Flash the button to show success\n                this.classList.add('btn-success');\n                setTimeout(()=>{\n                    this.classList.remove('btn-success');\n                }, 1000);\n            }).catch(()=>{\n                window.appUtils.showError('Failed to copy to clipboard');\n            });\n        } catch (error) {\n            // Fallback for older browsers\n            const textArea = document.createElement('textarea');\n            textArea.value = coverLetterContent.value;\n            textArea.style.position = 'fixed';\n            document.body.appendChild(textArea);\n            textArea.focus();\n            textArea.select();\n            try {\n                document.execCommand('copy');\n                this.classList.add('btn-success');\n                setTimeout(()=>{\n                    this.classList.remove('btn-success');\n                }, 1000);\n            } catch (err) {\n                window.appUtils.showError('Failed to copy to clipboard');\n            }\n            document.body.removeChild(textArea);\n        }\n    });\n}\n\n\n// Initialize the application\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    console.log('Cover Letter Generator initialized');\n    // Make config and utils available globally (for HTMX and inline scripts)\n    window.appConfig = (0, $bebe1cbb5a309c8c$export$2e2bcd8739ae039);\n    window.appUtils = {\n        sanitizeInput: $820877bea407f5fe$export$d529ba4b6bdbcf0c,\n        sanitizeHtml: $820877bea407f5fe$export$c0fc46c8edd7094a,\n        showError: $820877bea407f5fe$export$3879b24e8245693d,\n        validateForm: $820877bea407f5fe$export$ed692cabb252e59b\n    };\n    // Setup form handlers\n    (0, $0df1b74646f49493$export$c49cb68fcff57920)();\n});\n\n\n//# sourceMappingURL=index.584f8570.js.map\n","// Main application entry point\nimport config from '../config.js';\nimport { sanitizeInput, sanitizeHtml, showError, validateForm } from '../utils.js';\nimport { setupFormHandlers } from './form-handlers.js';\n\n// Initialize the application\ndocument.addEventListener('DOMContentLoaded', () => {\n  console.log('Cover Letter Generator initialized');\n  \n  // Make config and utils available globally (for HTMX and inline scripts)\n  window.appConfig = config;\n  window.appUtils = { sanitizeInput, sanitizeHtml, showError, validateForm };\n  \n  // Setup form handlers\n  setupFormHandlers();\n}); ","// Environment configuration\nconst isDevelopment = process.env.NODE_ENV === 'development';\n\n// API configuration\nconst config = {\n  // API base URL - determined purely by NODE_ENV\n  apiBaseUrl: isDevelopment \n    ? 'http://localhost:8000/generate_cover_letter'  // Development URL with path\n    : process.env.API_URL,     // Production URL from .env\n\n  // Version info\n  version: process.env.npm_package_version || '1.0.0',\n  \n  // Feature flags\n  features: {\n    debug: isDevelopment,\n  }\n};\n\n// Freeze the config to prevent modifications\nObject.freeze(config);\n\nexport default config; ","// Import DOMPurify (will be loaded as a module in index.html)\nimport DOMPurify from 'dompurify';\n\n/**\n * Sanitize a string to prevent XSS attacks\n * @param {string} input - The string to sanitize\n * @returns {string} Sanitized string\n */\nexport function sanitizeInput(input) {\n  if (!input) return '';\n  return DOMPurify.sanitize(input, { ALLOWED_TAGS: [], ALLOWED_ATTR: [] }).trim();\n}\n\n/**\n * Sanitize HTML content for display\n * @param {string} html - The HTML to sanitize\n * @returns {string} Sanitized HTML\n */\nexport function sanitizeHtml(html) {\n  if (!html) return '';\n  return DOMPurify.sanitize(html, {\n    ALLOWED_TAGS: ['p', 'br', 'b', 'i', 'em', 'strong', 'u', 'ul', 'ol', 'li'],\n    ALLOWED_ATTR: []\n  });\n}\n\n/**\n * Display an error message\n * @param {string} message - Error message\n * @param {string} elementId - Target element ID (defaults to common error display)\n */\nexport function showError(message, elementId = 'error_container') {\n  const errorElement = document.getElementById(elementId);\n  if (errorElement) {\n    errorElement.textContent = sanitizeInput(message);\n    errorElement.classList.remove('hidden');\n    \n    // Auto hide after 5 seconds\n    setTimeout(() => {\n      errorElement.classList.add('hidden');\n    }, 5000);\n  } else {\n    console.error('Error:', message);\n  }\n}\n\n/**\n * Validate form inputs\n * @param {FormData} formData - The form data to validate\n * @returns {Object} Validation result with isValid and errorMessage\n */\nexport function validateForm(formData) {\n  // Check for CV file\n  const cvFile = formData.get('cv_file');\n  if (!cvFile || cvFile.size === 0) {\n    return { isValid: false, errorMessage: 'Please upload your CV/resume file' };\n  }\n  \n  // Check job description - either text or image must be provided\n  const jobDescText = formData.get('job_desc_text');\n  const jobDescImage = formData.get('job_desc_image');\n  \n  if ((!jobDescText || jobDescText.trim() === '') && (!jobDescImage || jobDescImage.size === 0)) {\n    return { isValid: false, errorMessage: 'Please provide either job description text or image' };\n  }\n  \n  return { isValid: true, errorMessage: '' };\n} ","/*! @license DOMPurify 3.2.4 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.2.4/LICENSE */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.DOMPurify = factory());\n})(this, (function () { 'use strict';\n\n  const {\n    entries,\n    setPrototypeOf,\n    isFrozen,\n    getPrototypeOf,\n    getOwnPropertyDescriptor\n  } = Object;\n  let {\n    freeze,\n    seal,\n    create\n  } = Object; // eslint-disable-line import/no-mutable-exports\n  let {\n    apply,\n    construct\n  } = typeof Reflect !== 'undefined' && Reflect;\n  if (!freeze) {\n    freeze = function freeze(x) {\n      return x;\n    };\n  }\n  if (!seal) {\n    seal = function seal(x) {\n      return x;\n    };\n  }\n  if (!apply) {\n    apply = function apply(fun, thisValue, args) {\n      return fun.apply(thisValue, args);\n    };\n  }\n  if (!construct) {\n    construct = function construct(Func, args) {\n      return new Func(...args);\n    };\n  }\n  const arrayForEach = unapply(Array.prototype.forEach);\n  const arrayLastIndexOf = unapply(Array.prototype.lastIndexOf);\n  const arrayPop = unapply(Array.prototype.pop);\n  const arrayPush = unapply(Array.prototype.push);\n  const arraySplice = unapply(Array.prototype.splice);\n  const stringToLowerCase = unapply(String.prototype.toLowerCase);\n  const stringToString = unapply(String.prototype.toString);\n  const stringMatch = unapply(String.prototype.match);\n  const stringReplace = unapply(String.prototype.replace);\n  const stringIndexOf = unapply(String.prototype.indexOf);\n  const stringTrim = unapply(String.prototype.trim);\n  const objectHasOwnProperty = unapply(Object.prototype.hasOwnProperty);\n  const regExpTest = unapply(RegExp.prototype.test);\n  const typeErrorCreate = unconstruct(TypeError);\n  /**\n   * Creates a new function that calls the given function with a specified thisArg and arguments.\n   *\n   * @param func - The function to be wrapped and called.\n   * @returns A new function that calls the given function with a specified thisArg and arguments.\n   */\n  function unapply(func) {\n    return function (thisArg) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      return apply(func, thisArg, args);\n    };\n  }\n  /**\n   * Creates a new function that constructs an instance of the given constructor function with the provided arguments.\n   *\n   * @param func - The constructor function to be wrapped and called.\n   * @returns A new function that constructs an instance of the given constructor function with the provided arguments.\n   */\n  function unconstruct(func) {\n    return function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return construct(func, args);\n    };\n  }\n  /**\n   * Add properties to a lookup table\n   *\n   * @param set - The set to which elements will be added.\n   * @param array - The array containing elements to be added to the set.\n   * @param transformCaseFunc - An optional function to transform the case of each element before adding to the set.\n   * @returns The modified set with added elements.\n   */\n  function addToSet(set, array) {\n    let transformCaseFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : stringToLowerCase;\n    if (setPrototypeOf) {\n      // Make 'in' and truthy checks like Boolean(set.constructor)\n      // independent of any properties defined on Object.prototype.\n      // Prevent prototype setters from intercepting set as a this value.\n      setPrototypeOf(set, null);\n    }\n    let l = array.length;\n    while (l--) {\n      let element = array[l];\n      if (typeof element === 'string') {\n        const lcElement = transformCaseFunc(element);\n        if (lcElement !== element) {\n          // Config presets (e.g. tags.js, attrs.js) are immutable.\n          if (!isFrozen(array)) {\n            array[l] = lcElement;\n          }\n          element = lcElement;\n        }\n      }\n      set[element] = true;\n    }\n    return set;\n  }\n  /**\n   * Clean up an array to harden against CSPP\n   *\n   * @param array - The array to be cleaned.\n   * @returns The cleaned version of the array\n   */\n  function cleanArray(array) {\n    for (let index = 0; index < array.length; index++) {\n      const isPropertyExist = objectHasOwnProperty(array, index);\n      if (!isPropertyExist) {\n        array[index] = null;\n      }\n    }\n    return array;\n  }\n  /**\n   * Shallow clone an object\n   *\n   * @param object - The object to be cloned.\n   * @returns A new object that copies the original.\n   */\n  function clone(object) {\n    const newObject = create(null);\n    for (const [property, value] of entries(object)) {\n      const isPropertyExist = objectHasOwnProperty(object, property);\n      if (isPropertyExist) {\n        if (Array.isArray(value)) {\n          newObject[property] = cleanArray(value);\n        } else if (value && typeof value === 'object' && value.constructor === Object) {\n          newObject[property] = clone(value);\n        } else {\n          newObject[property] = value;\n        }\n      }\n    }\n    return newObject;\n  }\n  /**\n   * This method automatically checks if the prop is function or getter and behaves accordingly.\n   *\n   * @param object - The object to look up the getter function in its prototype chain.\n   * @param prop - The property name for which to find the getter function.\n   * @returns The getter function found in the prototype chain or a fallback function.\n   */\n  function lookupGetter(object, prop) {\n    while (object !== null) {\n      const desc = getOwnPropertyDescriptor(object, prop);\n      if (desc) {\n        if (desc.get) {\n          return unapply(desc.get);\n        }\n        if (typeof desc.value === 'function') {\n          return unapply(desc.value);\n        }\n      }\n      object = getPrototypeOf(object);\n    }\n    function fallbackValue() {\n      return null;\n    }\n    return fallbackValue;\n  }\n\n  const html$1 = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']);\n  const svg$1 = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);\n  const svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feDropShadow', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']);\n  // List of SVG elements that are disallowed by default.\n  // We still need to know them so that we can do namespace\n  // checks properly in case one wants to add them to\n  // allow-list.\n  const svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);\n  const mathMl$1 = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover', 'mprescripts']);\n  // Similarly to SVG, we want to know all MathML elements,\n  // even those that we disallow by default.\n  const mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);\n  const text = freeze(['#text']);\n\n  const html = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'nonce', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'popover', 'popovertarget', 'popovertargetaction', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'wrap', 'xmlns', 'slot']);\n  const svg = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'amplitude', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'exponent', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'intercept', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'slope', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'tablevalues', 'targetx', 'targety', 'transform', 'transform-origin', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);\n  const mathMl = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);\n  const xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);\n\n  // eslint-disable-next-line unicorn/better-regex\n  const MUSTACHE_EXPR = seal(/\\{\\{[\\w\\W]*|[\\w\\W]*\\}\\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode\n  const ERB_EXPR = seal(/<%[\\w\\W]*|[\\w\\W]*%>/gm);\n  const TMPLIT_EXPR = seal(/\\$\\{[\\w\\W]*/gm); // eslint-disable-line unicorn/better-regex\n  const DATA_ATTR = seal(/^data-[\\-\\w.\\u00B7-\\uFFFF]+$/); // eslint-disable-line no-useless-escape\n  const ARIA_ATTR = seal(/^aria-[\\-\\w]+$/); // eslint-disable-line no-useless-escape\n  const IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i // eslint-disable-line no-useless-escape\n  );\n  const IS_SCRIPT_OR_DATA = seal(/^(?:\\w+script|data):/i);\n  const ATTR_WHITESPACE = seal(/[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205F\\u3000]/g // eslint-disable-line no-control-regex\n  );\n  const DOCTYPE_NAME = seal(/^html$/i);\n  const CUSTOM_ELEMENT = seal(/^[a-z][.\\w]*(-[.\\w]+)+$/i);\n\n  var EXPRESSIONS = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ARIA_ATTR: ARIA_ATTR,\n    ATTR_WHITESPACE: ATTR_WHITESPACE,\n    CUSTOM_ELEMENT: CUSTOM_ELEMENT,\n    DATA_ATTR: DATA_ATTR,\n    DOCTYPE_NAME: DOCTYPE_NAME,\n    ERB_EXPR: ERB_EXPR,\n    IS_ALLOWED_URI: IS_ALLOWED_URI,\n    IS_SCRIPT_OR_DATA: IS_SCRIPT_OR_DATA,\n    MUSTACHE_EXPR: MUSTACHE_EXPR,\n    TMPLIT_EXPR: TMPLIT_EXPR\n  });\n\n  /* eslint-disable @typescript-eslint/indent */\n  // https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\n  const NODE_TYPE = {\n    element: 1,\n    attribute: 2,\n    text: 3,\n    cdataSection: 4,\n    entityReference: 5,\n    // Deprecated\n    entityNode: 6,\n    // Deprecated\n    progressingInstruction: 7,\n    comment: 8,\n    document: 9,\n    documentType: 10,\n    documentFragment: 11,\n    notation: 12 // Deprecated\n  };\n  const getGlobal = function getGlobal() {\n    return typeof window === 'undefined' ? null : window;\n  };\n  /**\n   * Creates a no-op policy for internal use only.\n   * Don't export this function outside this module!\n   * @param trustedTypes The policy factory.\n   * @param purifyHostElement The Script element used to load DOMPurify (to determine policy name suffix).\n   * @return The policy created (or null, if Trusted Types\n   * are not supported or creating the policy failed).\n   */\n  const _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, purifyHostElement) {\n    if (typeof trustedTypes !== 'object' || typeof trustedTypes.createPolicy !== 'function') {\n      return null;\n    }\n    // Allow the callers to control the unique policy name\n    // by adding a data-tt-policy-suffix to the script element with the DOMPurify.\n    // Policy creation with duplicate names throws in Trusted Types.\n    let suffix = null;\n    const ATTR_NAME = 'data-tt-policy-suffix';\n    if (purifyHostElement && purifyHostElement.hasAttribute(ATTR_NAME)) {\n      suffix = purifyHostElement.getAttribute(ATTR_NAME);\n    }\n    const policyName = 'dompurify' + (suffix ? '#' + suffix : '');\n    try {\n      return trustedTypes.createPolicy(policyName, {\n        createHTML(html) {\n          return html;\n        },\n        createScriptURL(scriptUrl) {\n          return scriptUrl;\n        }\n      });\n    } catch (_) {\n      // Policy creation failed (most likely another DOMPurify script has\n      // already run). Skip creating the policy, as this will only cause errors\n      // if TT are enforced.\n      console.warn('TrustedTypes policy ' + policyName + ' could not be created.');\n      return null;\n    }\n  };\n  const _createHooksMap = function _createHooksMap() {\n    return {\n      afterSanitizeAttributes: [],\n      afterSanitizeElements: [],\n      afterSanitizeShadowDOM: [],\n      beforeSanitizeAttributes: [],\n      beforeSanitizeElements: [],\n      beforeSanitizeShadowDOM: [],\n      uponSanitizeAttribute: [],\n      uponSanitizeElement: [],\n      uponSanitizeShadowNode: []\n    };\n  };\n  function createDOMPurify() {\n    let window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();\n    const DOMPurify = root => createDOMPurify(root);\n    DOMPurify.version = '3.2.4';\n    DOMPurify.removed = [];\n    if (!window || !window.document || window.document.nodeType !== NODE_TYPE.document || !window.Element) {\n      // Not running in a browser, provide a factory function\n      // so that you can pass your own Window\n      DOMPurify.isSupported = false;\n      return DOMPurify;\n    }\n    let {\n      document\n    } = window;\n    const originalDocument = document;\n    const currentScript = originalDocument.currentScript;\n    const {\n      DocumentFragment,\n      HTMLTemplateElement,\n      Node,\n      Element,\n      NodeFilter,\n      NamedNodeMap = window.NamedNodeMap || window.MozNamedAttrMap,\n      HTMLFormElement,\n      DOMParser,\n      trustedTypes\n    } = window;\n    const ElementPrototype = Element.prototype;\n    const cloneNode = lookupGetter(ElementPrototype, 'cloneNode');\n    const remove = lookupGetter(ElementPrototype, 'remove');\n    const getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');\n    const getChildNodes = lookupGetter(ElementPrototype, 'childNodes');\n    const getParentNode = lookupGetter(ElementPrototype, 'parentNode');\n    // As per issue #47, the web-components registry is inherited by a\n    // new document created via createHTMLDocument. As per the spec\n    // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\n    // a new empty registry is used when creating a template contents owner\n    // document, so we use that as our parent document to ensure nothing\n    // is inherited.\n    if (typeof HTMLTemplateElement === 'function') {\n      const template = document.createElement('template');\n      if (template.content && template.content.ownerDocument) {\n        document = template.content.ownerDocument;\n      }\n    }\n    let trustedTypesPolicy;\n    let emptyHTML = '';\n    const {\n      implementation,\n      createNodeIterator,\n      createDocumentFragment,\n      getElementsByTagName\n    } = document;\n    const {\n      importNode\n    } = originalDocument;\n    let hooks = _createHooksMap();\n    /**\n     * Expose whether this browser supports running the full DOMPurify.\n     */\n    DOMPurify.isSupported = typeof entries === 'function' && typeof getParentNode === 'function' && implementation && implementation.createHTMLDocument !== undefined;\n    const {\n      MUSTACHE_EXPR,\n      ERB_EXPR,\n      TMPLIT_EXPR,\n      DATA_ATTR,\n      ARIA_ATTR,\n      IS_SCRIPT_OR_DATA,\n      ATTR_WHITESPACE,\n      CUSTOM_ELEMENT\n    } = EXPRESSIONS;\n    let {\n      IS_ALLOWED_URI: IS_ALLOWED_URI$1\n    } = EXPRESSIONS;\n    /**\n     * We consider the elements and attributes below to be safe. Ideally\n     * don't add any new ones but feel free to remove unwanted ones.\n     */\n    /* allowed element names */\n    let ALLOWED_TAGS = null;\n    const DEFAULT_ALLOWED_TAGS = addToSet({}, [...html$1, ...svg$1, ...svgFilters, ...mathMl$1, ...text]);\n    /* Allowed attribute names */\n    let ALLOWED_ATTR = null;\n    const DEFAULT_ALLOWED_ATTR = addToSet({}, [...html, ...svg, ...mathMl, ...xml]);\n    /*\n     * Configure how DOMPurify should handle custom elements and their attributes as well as customized built-in elements.\n     * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)\n     * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)\n     * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.\n     */\n    let CUSTOM_ELEMENT_HANDLING = Object.seal(create(null, {\n      tagNameCheck: {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: null\n      },\n      attributeNameCheck: {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: null\n      },\n      allowCustomizedBuiltInElements: {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: false\n      }\n    }));\n    /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */\n    let FORBID_TAGS = null;\n    /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */\n    let FORBID_ATTR = null;\n    /* Decide if ARIA attributes are okay */\n    let ALLOW_ARIA_ATTR = true;\n    /* Decide if custom data attributes are okay */\n    let ALLOW_DATA_ATTR = true;\n    /* Decide if unknown protocols are okay */\n    let ALLOW_UNKNOWN_PROTOCOLS = false;\n    /* Decide if self-closing tags in attributes are allowed.\n     * Usually removed due to a mXSS issue in jQuery 3.0 */\n    let ALLOW_SELF_CLOSE_IN_ATTR = true;\n    /* Output should be safe for common template engines.\n     * This means, DOMPurify removes data attributes, mustaches and ERB\n     */\n    let SAFE_FOR_TEMPLATES = false;\n    /* Output should be safe even for XML used within HTML and alike.\n     * This means, DOMPurify removes comments when containing risky content.\n     */\n    let SAFE_FOR_XML = true;\n    /* Decide if document with <html>... should be returned */\n    let WHOLE_DOCUMENT = false;\n    /* Track whether config is already set on this instance of DOMPurify. */\n    let SET_CONFIG = false;\n    /* Decide if all elements (e.g. style, script) must be children of\n     * document.body. By default, browsers might move them to document.head */\n    let FORCE_BODY = false;\n    /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html\n     * string (or a TrustedHTML object if Trusted Types are supported).\n     * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\n     */\n    let RETURN_DOM = false;\n    /* Decide if a DOM `DocumentFragment` should be returned, instead of a html\n     * string  (or a TrustedHTML object if Trusted Types are supported) */\n    let RETURN_DOM_FRAGMENT = false;\n    /* Try to return a Trusted Type object instead of a string, return a string in\n     * case Trusted Types are not supported  */\n    let RETURN_TRUSTED_TYPE = false;\n    /* Output should be free from DOM clobbering attacks?\n     * This sanitizes markups named with colliding, clobberable built-in DOM APIs.\n     */\n    let SANITIZE_DOM = true;\n    /* Achieve full DOM Clobbering protection by isolating the namespace of named\n     * properties and JS variables, mitigating attacks that abuse the HTML/DOM spec rules.\n     *\n     * HTML/DOM spec rules that enable DOM Clobbering:\n     *   - Named Access on Window (§7.3.3)\n     *   - DOM Tree Accessors (§3.1.5)\n     *   - Form Element Parent-Child Relations (§4.10.3)\n     *   - Iframe srcdoc / Nested WindowProxies (§4.8.5)\n     *   - HTMLCollection (§4.2.10.2)\n     *\n     * Namespace isolation is implemented by prefixing `id` and `name` attributes\n     * with a constant string, i.e., `user-content-`\n     */\n    let SANITIZE_NAMED_PROPS = false;\n    const SANITIZE_NAMED_PROPS_PREFIX = 'user-content-';\n    /* Keep element content when removing element? */\n    let KEEP_CONTENT = true;\n    /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead\n     * of importing it into a new Document and returning a sanitized copy */\n    let IN_PLACE = false;\n    /* Allow usage of profiles like html, svg and mathMl */\n    let USE_PROFILES = {};\n    /* Tags to ignore content of when KEEP_CONTENT is true */\n    let FORBID_CONTENTS = null;\n    const DEFAULT_FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);\n    /* Tags that are safe for data: URIs */\n    let DATA_URI_TAGS = null;\n    const DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);\n    /* Attributes safe for values like \"javascript:\" */\n    let URI_SAFE_ATTRIBUTES = null;\n    const DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'role', 'summary', 'title', 'value', 'style', 'xmlns']);\n    const MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\n    const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n    const HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';\n    /* Document namespace */\n    let NAMESPACE = HTML_NAMESPACE;\n    let IS_EMPTY_INPUT = false;\n    /* Allowed XHTML+XML namespaces */\n    let ALLOWED_NAMESPACES = null;\n    const DEFAULT_ALLOWED_NAMESPACES = addToSet({}, [MATHML_NAMESPACE, SVG_NAMESPACE, HTML_NAMESPACE], stringToString);\n    let MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);\n    let HTML_INTEGRATION_POINTS = addToSet({}, ['annotation-xml']);\n    // Certain elements are allowed in both SVG and HTML\n    // namespace. We need to specify them explicitly\n    // so that they don't get erroneously deleted from\n    // HTML namespace.\n    const COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ['title', 'style', 'font', 'a', 'script']);\n    /* Parsing of strict XHTML documents */\n    let PARSER_MEDIA_TYPE = null;\n    const SUPPORTED_PARSER_MEDIA_TYPES = ['application/xhtml+xml', 'text/html'];\n    const DEFAULT_PARSER_MEDIA_TYPE = 'text/html';\n    let transformCaseFunc = null;\n    /* Keep a reference to config to pass to hooks */\n    let CONFIG = null;\n    /* Ideally, do not touch anything below this line */\n    /* ______________________________________________ */\n    const formElement = document.createElement('form');\n    const isRegexOrFunction = function isRegexOrFunction(testValue) {\n      return testValue instanceof RegExp || testValue instanceof Function;\n    };\n    /**\n     * _parseConfig\n     *\n     * @param cfg optional config literal\n     */\n    // eslint-disable-next-line complexity\n    const _parseConfig = function _parseConfig() {\n      let cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (CONFIG && CONFIG === cfg) {\n        return;\n      }\n      /* Shield configuration object from tampering */\n      if (!cfg || typeof cfg !== 'object') {\n        cfg = {};\n      }\n      /* Shield configuration object from prototype pollution */\n      cfg = clone(cfg);\n      PARSER_MEDIA_TYPE =\n      // eslint-disable-next-line unicorn/prefer-includes\n      SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? DEFAULT_PARSER_MEDIA_TYPE : cfg.PARSER_MEDIA_TYPE;\n      // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.\n      transformCaseFunc = PARSER_MEDIA_TYPE === 'application/xhtml+xml' ? stringToString : stringToLowerCase;\n      /* Set configuration parameters */\n      ALLOWED_TAGS = objectHasOwnProperty(cfg, 'ALLOWED_TAGS') ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;\n      ALLOWED_ATTR = objectHasOwnProperty(cfg, 'ALLOWED_ATTR') ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;\n      ALLOWED_NAMESPACES = objectHasOwnProperty(cfg, 'ALLOWED_NAMESPACES') ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString) : DEFAULT_ALLOWED_NAMESPACES;\n      URI_SAFE_ATTRIBUTES = objectHasOwnProperty(cfg, 'ADD_URI_SAFE_ATTR') ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR, transformCaseFunc) : DEFAULT_URI_SAFE_ATTRIBUTES;\n      DATA_URI_TAGS = objectHasOwnProperty(cfg, 'ADD_DATA_URI_TAGS') ? addToSet(clone(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS, transformCaseFunc) : DEFAULT_DATA_URI_TAGS;\n      FORBID_CONTENTS = objectHasOwnProperty(cfg, 'FORBID_CONTENTS') ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;\n      FORBID_TAGS = objectHasOwnProperty(cfg, 'FORBID_TAGS') ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : {};\n      FORBID_ATTR = objectHasOwnProperty(cfg, 'FORBID_ATTR') ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : {};\n      USE_PROFILES = objectHasOwnProperty(cfg, 'USE_PROFILES') ? cfg.USE_PROFILES : false;\n      ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\n      ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\n      ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\n      ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false; // Default true\n      SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\n      SAFE_FOR_XML = cfg.SAFE_FOR_XML !== false; // Default true\n      WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\n      RETURN_DOM = cfg.RETURN_DOM || false; // Default false\n      RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\n      RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false\n      FORCE_BODY = cfg.FORCE_BODY || false; // Default false\n      SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\n      SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false; // Default false\n      KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\n      IN_PLACE = cfg.IN_PLACE || false; // Default false\n      IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI;\n      NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;\n      MATHML_TEXT_INTEGRATION_POINTS = cfg.MATHML_TEXT_INTEGRATION_POINTS || MATHML_TEXT_INTEGRATION_POINTS;\n      HTML_INTEGRATION_POINTS = cfg.HTML_INTEGRATION_POINTS || HTML_INTEGRATION_POINTS;\n      CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};\n      if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {\n        CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;\n      }\n      if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {\n        CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;\n      }\n      if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === 'boolean') {\n        CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;\n      }\n      if (SAFE_FOR_TEMPLATES) {\n        ALLOW_DATA_ATTR = false;\n      }\n      if (RETURN_DOM_FRAGMENT) {\n        RETURN_DOM = true;\n      }\n      /* Parse profile info */\n      if (USE_PROFILES) {\n        ALLOWED_TAGS = addToSet({}, text);\n        ALLOWED_ATTR = [];\n        if (USE_PROFILES.html === true) {\n          addToSet(ALLOWED_TAGS, html$1);\n          addToSet(ALLOWED_ATTR, html);\n        }\n        if (USE_PROFILES.svg === true) {\n          addToSet(ALLOWED_TAGS, svg$1);\n          addToSet(ALLOWED_ATTR, svg);\n          addToSet(ALLOWED_ATTR, xml);\n        }\n        if (USE_PROFILES.svgFilters === true) {\n          addToSet(ALLOWED_TAGS, svgFilters);\n          addToSet(ALLOWED_ATTR, svg);\n          addToSet(ALLOWED_ATTR, xml);\n        }\n        if (USE_PROFILES.mathMl === true) {\n          addToSet(ALLOWED_TAGS, mathMl$1);\n          addToSet(ALLOWED_ATTR, mathMl);\n          addToSet(ALLOWED_ATTR, xml);\n        }\n      }\n      /* Merge configuration parameters */\n      if (cfg.ADD_TAGS) {\n        if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {\n          ALLOWED_TAGS = clone(ALLOWED_TAGS);\n        }\n        addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);\n      }\n      if (cfg.ADD_ATTR) {\n        if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {\n          ALLOWED_ATTR = clone(ALLOWED_ATTR);\n        }\n        addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);\n      }\n      if (cfg.ADD_URI_SAFE_ATTR) {\n        addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);\n      }\n      if (cfg.FORBID_CONTENTS) {\n        if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {\n          FORBID_CONTENTS = clone(FORBID_CONTENTS);\n        }\n        addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);\n      }\n      /* Add #text in case KEEP_CONTENT is set to true */\n      if (KEEP_CONTENT) {\n        ALLOWED_TAGS['#text'] = true;\n      }\n      /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */\n      if (WHOLE_DOCUMENT) {\n        addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);\n      }\n      /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */\n      if (ALLOWED_TAGS.table) {\n        addToSet(ALLOWED_TAGS, ['tbody']);\n        delete FORBID_TAGS.tbody;\n      }\n      if (cfg.TRUSTED_TYPES_POLICY) {\n        if (typeof cfg.TRUSTED_TYPES_POLICY.createHTML !== 'function') {\n          throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a \"createHTML\" hook.');\n        }\n        if (typeof cfg.TRUSTED_TYPES_POLICY.createScriptURL !== 'function') {\n          throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a \"createScriptURL\" hook.');\n        }\n        // Overwrite existing TrustedTypes policy.\n        trustedTypesPolicy = cfg.TRUSTED_TYPES_POLICY;\n        // Sign local variables required by `sanitize`.\n        emptyHTML = trustedTypesPolicy.createHTML('');\n      } else {\n        // Uninitialized policy, attempt to initialize the internal dompurify policy.\n        if (trustedTypesPolicy === undefined) {\n          trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, currentScript);\n        }\n        // If creating the internal policy succeeded sign internal variables.\n        if (trustedTypesPolicy !== null && typeof emptyHTML === 'string') {\n          emptyHTML = trustedTypesPolicy.createHTML('');\n        }\n      }\n      // Prevent further manipulation of configuration.\n      // Not available in IE8, Safari 5, etc.\n      if (freeze) {\n        freeze(cfg);\n      }\n      CONFIG = cfg;\n    };\n    /* Keep track of all possible SVG and MathML tags\n     * so that we can perform the namespace checks\n     * correctly. */\n    const ALL_SVG_TAGS = addToSet({}, [...svg$1, ...svgFilters, ...svgDisallowed]);\n    const ALL_MATHML_TAGS = addToSet({}, [...mathMl$1, ...mathMlDisallowed]);\n    /**\n     * @param element a DOM element whose namespace is being checked\n     * @returns Return false if the element has a\n     *  namespace that a spec-compliant parser would never\n     *  return. Return true otherwise.\n     */\n    const _checkValidNamespace = function _checkValidNamespace(element) {\n      let parent = getParentNode(element);\n      // In JSDOM, if we're inside shadow DOM, then parentNode\n      // can be null. We just simulate parent in this case.\n      if (!parent || !parent.tagName) {\n        parent = {\n          namespaceURI: NAMESPACE,\n          tagName: 'template'\n        };\n      }\n      const tagName = stringToLowerCase(element.tagName);\n      const parentTagName = stringToLowerCase(parent.tagName);\n      if (!ALLOWED_NAMESPACES[element.namespaceURI]) {\n        return false;\n      }\n      if (element.namespaceURI === SVG_NAMESPACE) {\n        // The only way to switch from HTML namespace to SVG\n        // is via <svg>. If it happens via any other tag, then\n        // it should be killed.\n        if (parent.namespaceURI === HTML_NAMESPACE) {\n          return tagName === 'svg';\n        }\n        // The only way to switch from MathML to SVG is via`\n        // svg if parent is either <annotation-xml> or MathML\n        // text integration points.\n        if (parent.namespaceURI === MATHML_NAMESPACE) {\n          return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);\n        }\n        // We only allow elements that are defined in SVG\n        // spec. All others are disallowed in SVG namespace.\n        return Boolean(ALL_SVG_TAGS[tagName]);\n      }\n      if (element.namespaceURI === MATHML_NAMESPACE) {\n        // The only way to switch from HTML namespace to MathML\n        // is via <math>. If it happens via any other tag, then\n        // it should be killed.\n        if (parent.namespaceURI === HTML_NAMESPACE) {\n          return tagName === 'math';\n        }\n        // The only way to switch from SVG to MathML is via\n        // <math> and HTML integration points\n        if (parent.namespaceURI === SVG_NAMESPACE) {\n          return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];\n        }\n        // We only allow elements that are defined in MathML\n        // spec. All others are disallowed in MathML namespace.\n        return Boolean(ALL_MATHML_TAGS[tagName]);\n      }\n      if (element.namespaceURI === HTML_NAMESPACE) {\n        // The only way to switch from SVG to HTML is via\n        // HTML integration points, and from MathML to HTML\n        // is via MathML text integration points\n        if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {\n          return false;\n        }\n        if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {\n          return false;\n        }\n        // We disallow tags that are specific for MathML\n        // or SVG and should never appear in HTML namespace\n        return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);\n      }\n      // For XHTML and XML documents that support custom namespaces\n      if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && ALLOWED_NAMESPACES[element.namespaceURI]) {\n        return true;\n      }\n      // The code should never reach this place (this means\n      // that the element somehow got namespace that is not\n      // HTML, SVG, MathML or allowed via ALLOWED_NAMESPACES).\n      // Return false just in case.\n      return false;\n    };\n    /**\n     * _forceRemove\n     *\n     * @param node a DOM node\n     */\n    const _forceRemove = function _forceRemove(node) {\n      arrayPush(DOMPurify.removed, {\n        element: node\n      });\n      try {\n        // eslint-disable-next-line unicorn/prefer-dom-node-remove\n        getParentNode(node).removeChild(node);\n      } catch (_) {\n        remove(node);\n      }\n    };\n    /**\n     * _removeAttribute\n     *\n     * @param name an Attribute name\n     * @param element a DOM node\n     */\n    const _removeAttribute = function _removeAttribute(name, element) {\n      try {\n        arrayPush(DOMPurify.removed, {\n          attribute: element.getAttributeNode(name),\n          from: element\n        });\n      } catch (_) {\n        arrayPush(DOMPurify.removed, {\n          attribute: null,\n          from: element\n        });\n      }\n      element.removeAttribute(name);\n      // We void attribute values for unremovable \"is\" attributes\n      if (name === 'is') {\n        if (RETURN_DOM || RETURN_DOM_FRAGMENT) {\n          try {\n            _forceRemove(element);\n          } catch (_) {}\n        } else {\n          try {\n            element.setAttribute(name, '');\n          } catch (_) {}\n        }\n      }\n    };\n    /**\n     * _initDocument\n     *\n     * @param dirty - a string of dirty markup\n     * @return a DOM, filled with the dirty markup\n     */\n    const _initDocument = function _initDocument(dirty) {\n      /* Create a HTML document */\n      let doc = null;\n      let leadingWhitespace = null;\n      if (FORCE_BODY) {\n        dirty = '<remove></remove>' + dirty;\n      } else {\n        /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */\n        const matches = stringMatch(dirty, /^[\\r\\n\\t ]+/);\n        leadingWhitespace = matches && matches[0];\n      }\n      if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && NAMESPACE === HTML_NAMESPACE) {\n        // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)\n        dirty = '<html xmlns=\"http://www.w3.org/1999/xhtml\"><head></head><body>' + dirty + '</body></html>';\n      }\n      const dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;\n      /*\n       * Use the DOMParser API by default, fallback later if needs be\n       * DOMParser not work for svg when has multiple root element.\n       */\n      if (NAMESPACE === HTML_NAMESPACE) {\n        try {\n          doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);\n        } catch (_) {}\n      }\n      /* Use createHTMLDocument in case DOMParser is not available */\n      if (!doc || !doc.documentElement) {\n        doc = implementation.createDocument(NAMESPACE, 'template', null);\n        try {\n          doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;\n        } catch (_) {\n          // Syntax error if dirtyPayload is invalid xml\n        }\n      }\n      const body = doc.body || doc.documentElement;\n      if (dirty && leadingWhitespace) {\n        body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);\n      }\n      /* Work on whole document or just its body */\n      if (NAMESPACE === HTML_NAMESPACE) {\n        return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];\n      }\n      return WHOLE_DOCUMENT ? doc.documentElement : body;\n    };\n    /**\n     * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.\n     *\n     * @param root The root element or node to start traversing on.\n     * @return The created NodeIterator\n     */\n    const _createNodeIterator = function _createNodeIterator(root) {\n      return createNodeIterator.call(root.ownerDocument || root, root,\n      // eslint-disable-next-line no-bitwise\n      NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT | NodeFilter.SHOW_PROCESSING_INSTRUCTION | NodeFilter.SHOW_CDATA_SECTION, null);\n    };\n    /**\n     * _isClobbered\n     *\n     * @param element element to check for clobbering attacks\n     * @return true if clobbered, false if safe\n     */\n    const _isClobbered = function _isClobbered(element) {\n      return element instanceof HTMLFormElement && (typeof element.nodeName !== 'string' || typeof element.textContent !== 'string' || typeof element.removeChild !== 'function' || !(element.attributes instanceof NamedNodeMap) || typeof element.removeAttribute !== 'function' || typeof element.setAttribute !== 'function' || typeof element.namespaceURI !== 'string' || typeof element.insertBefore !== 'function' || typeof element.hasChildNodes !== 'function');\n    };\n    /**\n     * Checks whether the given object is a DOM node.\n     *\n     * @param value object to check whether it's a DOM node\n     * @return true is object is a DOM node\n     */\n    const _isNode = function _isNode(value) {\n      return typeof Node === 'function' && value instanceof Node;\n    };\n    function _executeHooks(hooks, currentNode, data) {\n      arrayForEach(hooks, hook => {\n        hook.call(DOMPurify, currentNode, data, CONFIG);\n      });\n    }\n    /**\n     * _sanitizeElements\n     *\n     * @protect nodeName\n     * @protect textContent\n     * @protect removeChild\n     * @param currentNode to check for permission to exist\n     * @return true if node was killed, false if left alive\n     */\n    const _sanitizeElements = function _sanitizeElements(currentNode) {\n      let content = null;\n      /* Execute a hook if present */\n      _executeHooks(hooks.beforeSanitizeElements, currentNode, null);\n      /* Check if element is clobbered or can clobber */\n      if (_isClobbered(currentNode)) {\n        _forceRemove(currentNode);\n        return true;\n      }\n      /* Now let's check the element's type and name */\n      const tagName = transformCaseFunc(currentNode.nodeName);\n      /* Execute a hook if present */\n      _executeHooks(hooks.uponSanitizeElement, currentNode, {\n        tagName,\n        allowedTags: ALLOWED_TAGS\n      });\n      /* Detect mXSS attempts abusing namespace confusion */\n      if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && regExpTest(/<[/\\w]/g, currentNode.innerHTML) && regExpTest(/<[/\\w]/g, currentNode.textContent)) {\n        _forceRemove(currentNode);\n        return true;\n      }\n      /* Remove any occurrence of processing instructions */\n      if (currentNode.nodeType === NODE_TYPE.progressingInstruction) {\n        _forceRemove(currentNode);\n        return true;\n      }\n      /* Remove any kind of possibly harmful comments */\n      if (SAFE_FOR_XML && currentNode.nodeType === NODE_TYPE.comment && regExpTest(/<[/\\w]/g, currentNode.data)) {\n        _forceRemove(currentNode);\n        return true;\n      }\n      /* Remove element if anything forbids its presence */\n      if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n        /* Check if we have a custom element to handle */\n        if (!FORBID_TAGS[tagName] && _isBasicCustomElement(tagName)) {\n          if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) {\n            return false;\n          }\n          if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) {\n            return false;\n          }\n        }\n        /* Keep content except for bad-listed elements */\n        if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {\n          const parentNode = getParentNode(currentNode) || currentNode.parentNode;\n          const childNodes = getChildNodes(currentNode) || currentNode.childNodes;\n          if (childNodes && parentNode) {\n            const childCount = childNodes.length;\n            for (let i = childCount - 1; i >= 0; --i) {\n              const childClone = cloneNode(childNodes[i], true);\n              childClone.__removalCount = (currentNode.__removalCount || 0) + 1;\n              parentNode.insertBefore(childClone, getNextSibling(currentNode));\n            }\n          }\n        }\n        _forceRemove(currentNode);\n        return true;\n      }\n      /* Check whether element has a valid namespace */\n      if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {\n        _forceRemove(currentNode);\n        return true;\n      }\n      /* Make sure that older browsers don't get fallback-tag mXSS */\n      if ((tagName === 'noscript' || tagName === 'noembed' || tagName === 'noframes') && regExpTest(/<\\/no(script|embed|frames)/i, currentNode.innerHTML)) {\n        _forceRemove(currentNode);\n        return true;\n      }\n      /* Sanitize element content to be template-safe */\n      if (SAFE_FOR_TEMPLATES && currentNode.nodeType === NODE_TYPE.text) {\n        /* Get the element's text content */\n        content = currentNode.textContent;\n        arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {\n          content = stringReplace(content, expr, ' ');\n        });\n        if (currentNode.textContent !== content) {\n          arrayPush(DOMPurify.removed, {\n            element: currentNode.cloneNode()\n          });\n          currentNode.textContent = content;\n        }\n      }\n      /* Execute a hook if present */\n      _executeHooks(hooks.afterSanitizeElements, currentNode, null);\n      return false;\n    };\n    /**\n     * _isValidAttribute\n     *\n     * @param lcTag Lowercase tag name of containing element.\n     * @param lcName Lowercase attribute name.\n     * @param value Attribute value.\n     * @return Returns true if `value` is valid, otherwise false.\n     */\n    // eslint-disable-next-line complexity\n    const _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {\n      /* Make sure attribute cannot clobber */\n      if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {\n        return false;\n      }\n      /* Allow valid data-* attributes: At least one character after \"-\"\n          (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\n          XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\n          We don't need to check the value; it's always URI safe. */\n      if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR, lcName)) ; else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR, lcName)) ; else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\n        if (\n        // First condition does a very basic check if a) it's basically a valid custom element tagname AND\n        // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n        // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck\n        _isBasicCustomElement(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) ||\n        // Alternative, second condition checks if it's an `is`-attribute, AND\n        // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n        lcName === 'is' && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))) ; else {\n          return false;\n        }\n        /* Check value is safe. First, is attr inert? If so, is safe */\n      } else if (URI_SAFE_ATTRIBUTES[lcName]) ; else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ; else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if (value) {\n        return false;\n      } else ;\n      return true;\n    };\n    /**\n     * _isBasicCustomElement\n     * checks if at least one dash is included in tagName, and it's not the first char\n     * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name\n     *\n     * @param tagName name of the tag of the node to sanitize\n     * @returns Returns true if the tag name meets the basic criteria for a custom element, otherwise false.\n     */\n    const _isBasicCustomElement = function _isBasicCustomElement(tagName) {\n      return tagName !== 'annotation-xml' && stringMatch(tagName, CUSTOM_ELEMENT);\n    };\n    /**\n     * _sanitizeAttributes\n     *\n     * @protect attributes\n     * @protect nodeName\n     * @protect removeAttribute\n     * @protect setAttribute\n     *\n     * @param currentNode to sanitize\n     */\n    const _sanitizeAttributes = function _sanitizeAttributes(currentNode) {\n      /* Execute a hook if present */\n      _executeHooks(hooks.beforeSanitizeAttributes, currentNode, null);\n      const {\n        attributes\n      } = currentNode;\n      /* Check if we have attributes; if not we might have a text node */\n      if (!attributes || _isClobbered(currentNode)) {\n        return;\n      }\n      const hookEvent = {\n        attrName: '',\n        attrValue: '',\n        keepAttr: true,\n        allowedAttributes: ALLOWED_ATTR,\n        forceKeepAttr: undefined\n      };\n      let l = attributes.length;\n      /* Go backwards over all attributes; safely remove bad ones */\n      while (l--) {\n        const attr = attributes[l];\n        const {\n          name,\n          namespaceURI,\n          value: attrValue\n        } = attr;\n        const lcName = transformCaseFunc(name);\n        let value = name === 'value' ? attrValue : stringTrim(attrValue);\n        /* Execute a hook if present */\n        hookEvent.attrName = lcName;\n        hookEvent.attrValue = value;\n        hookEvent.keepAttr = true;\n        hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set\n        _executeHooks(hooks.uponSanitizeAttribute, currentNode, hookEvent);\n        value = hookEvent.attrValue;\n        /* Full DOM Clobbering protection via namespace isolation,\n         * Prefix id and name attributes with `user-content-`\n         */\n        if (SANITIZE_NAMED_PROPS && (lcName === 'id' || lcName === 'name')) {\n          // Remove the attribute with this value\n          _removeAttribute(name, currentNode);\n          // Prefix the value and later re-create the attribute with the sanitized value\n          value = SANITIZE_NAMED_PROPS_PREFIX + value;\n        }\n        /* Work around a security issue with comments inside attributes */\n        if (SAFE_FOR_XML && regExpTest(/((--!?|])>)|<\\/(style|title)/i, value)) {\n          _removeAttribute(name, currentNode);\n          continue;\n        }\n        /* Did the hooks approve of the attribute? */\n        if (hookEvent.forceKeepAttr) {\n          continue;\n        }\n        /* Remove attribute */\n        _removeAttribute(name, currentNode);\n        /* Did the hooks approve of the attribute? */\n        if (!hookEvent.keepAttr) {\n          continue;\n        }\n        /* Work around a security issue in jQuery 3.0 */\n        if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\\/>/i, value)) {\n          _removeAttribute(name, currentNode);\n          continue;\n        }\n        /* Sanitize attribute content to be template-safe */\n        if (SAFE_FOR_TEMPLATES) {\n          arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {\n            value = stringReplace(value, expr, ' ');\n          });\n        }\n        /* Is `value` valid for this attribute? */\n        const lcTag = transformCaseFunc(currentNode.nodeName);\n        if (!_isValidAttribute(lcTag, lcName, value)) {\n          continue;\n        }\n        /* Handle attributes that require Trusted Types */\n        if (trustedTypesPolicy && typeof trustedTypes === 'object' && typeof trustedTypes.getAttributeType === 'function') {\n          if (namespaceURI) ; else {\n            switch (trustedTypes.getAttributeType(lcTag, lcName)) {\n              case 'TrustedHTML':\n                {\n                  value = trustedTypesPolicy.createHTML(value);\n                  break;\n                }\n              case 'TrustedScriptURL':\n                {\n                  value = trustedTypesPolicy.createScriptURL(value);\n                  break;\n                }\n            }\n          }\n        }\n        /* Handle invalid data-* attribute set by try-catching it */\n        try {\n          if (namespaceURI) {\n            currentNode.setAttributeNS(namespaceURI, name, value);\n          } else {\n            /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. \"x-schema\". */\n            currentNode.setAttribute(name, value);\n          }\n          if (_isClobbered(currentNode)) {\n            _forceRemove(currentNode);\n          } else {\n            arrayPop(DOMPurify.removed);\n          }\n        } catch (_) {}\n      }\n      /* Execute a hook if present */\n      _executeHooks(hooks.afterSanitizeAttributes, currentNode, null);\n    };\n    /**\n     * _sanitizeShadowDOM\n     *\n     * @param fragment to iterate over recursively\n     */\n    const _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {\n      let shadowNode = null;\n      const shadowIterator = _createNodeIterator(fragment);\n      /* Execute a hook if present */\n      _executeHooks(hooks.beforeSanitizeShadowDOM, fragment, null);\n      while (shadowNode = shadowIterator.nextNode()) {\n        /* Execute a hook if present */\n        _executeHooks(hooks.uponSanitizeShadowNode, shadowNode, null);\n        /* Sanitize tags and elements */\n        _sanitizeElements(shadowNode);\n        /* Check attributes next */\n        _sanitizeAttributes(shadowNode);\n        /* Deep shadow DOM detected */\n        if (shadowNode.content instanceof DocumentFragment) {\n          _sanitizeShadowDOM(shadowNode.content);\n        }\n      }\n      /* Execute a hook if present */\n      _executeHooks(hooks.afterSanitizeShadowDOM, fragment, null);\n    };\n    // eslint-disable-next-line complexity\n    DOMPurify.sanitize = function (dirty) {\n      let cfg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      let body = null;\n      let importedNode = null;\n      let currentNode = null;\n      let returnNode = null;\n      /* Make sure we have a string to sanitize.\n        DO NOT return early, as this will return the wrong type if\n        the user has requested a DOM object rather than a string */\n      IS_EMPTY_INPUT = !dirty;\n      if (IS_EMPTY_INPUT) {\n        dirty = '<!-->';\n      }\n      /* Stringify, in case dirty is an object */\n      if (typeof dirty !== 'string' && !_isNode(dirty)) {\n        if (typeof dirty.toString === 'function') {\n          dirty = dirty.toString();\n          if (typeof dirty !== 'string') {\n            throw typeErrorCreate('dirty is not a string, aborting');\n          }\n        } else {\n          throw typeErrorCreate('toString is not a function');\n        }\n      }\n      /* Return dirty HTML if DOMPurify cannot run */\n      if (!DOMPurify.isSupported) {\n        return dirty;\n      }\n      /* Assign config vars */\n      if (!SET_CONFIG) {\n        _parseConfig(cfg);\n      }\n      /* Clean up removed elements */\n      DOMPurify.removed = [];\n      /* Check if dirty is correctly typed for IN_PLACE */\n      if (typeof dirty === 'string') {\n        IN_PLACE = false;\n      }\n      if (IN_PLACE) {\n        /* Do some early pre-sanitization to avoid unsafe root nodes */\n        if (dirty.nodeName) {\n          const tagName = transformCaseFunc(dirty.nodeName);\n          if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n            throw typeErrorCreate('root node is forbidden and cannot be sanitized in-place');\n          }\n        }\n      } else if (dirty instanceof Node) {\n        /* If dirty is a DOM element, append to an empty document to avoid\n           elements being stripped by the parser */\n        body = _initDocument('<!---->');\n        importedNode = body.ownerDocument.importNode(dirty, true);\n        if (importedNode.nodeType === NODE_TYPE.element && importedNode.nodeName === 'BODY') {\n          /* Node is already a body, use as is */\n          body = importedNode;\n        } else if (importedNode.nodeName === 'HTML') {\n          body = importedNode;\n        } else {\n          // eslint-disable-next-line unicorn/prefer-dom-node-append\n          body.appendChild(importedNode);\n        }\n      } else {\n        /* Exit directly if we have nothing to do */\n        if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT &&\n        // eslint-disable-next-line unicorn/prefer-includes\n        dirty.indexOf('<') === -1) {\n          return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;\n        }\n        /* Initialize the document to work on */\n        body = _initDocument(dirty);\n        /* Check we have a DOM node from the data */\n        if (!body) {\n          return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : '';\n        }\n      }\n      /* Remove first element node (ours) if FORCE_BODY is set */\n      if (body && FORCE_BODY) {\n        _forceRemove(body.firstChild);\n      }\n      /* Get node iterator */\n      const nodeIterator = _createNodeIterator(IN_PLACE ? dirty : body);\n      /* Now start iterating over the created document */\n      while (currentNode = nodeIterator.nextNode()) {\n        /* Sanitize tags and elements */\n        _sanitizeElements(currentNode);\n        /* Check attributes next */\n        _sanitizeAttributes(currentNode);\n        /* Shadow DOM detected, sanitize it */\n        if (currentNode.content instanceof DocumentFragment) {\n          _sanitizeShadowDOM(currentNode.content);\n        }\n      }\n      /* If we sanitized `dirty` in-place, return it. */\n      if (IN_PLACE) {\n        return dirty;\n      }\n      /* Return sanitized string or DOM */\n      if (RETURN_DOM) {\n        if (RETURN_DOM_FRAGMENT) {\n          returnNode = createDocumentFragment.call(body.ownerDocument);\n          while (body.firstChild) {\n            // eslint-disable-next-line unicorn/prefer-dom-node-append\n            returnNode.appendChild(body.firstChild);\n          }\n        } else {\n          returnNode = body;\n        }\n        if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmode) {\n          /*\n            AdoptNode() is not used because internal state is not reset\n            (e.g. the past names map of a HTMLFormElement), this is safe\n            in theory but we would rather not risk another attack vector.\n            The state that is cloned by importNode() is explicitly defined\n            by the specs.\n          */\n          returnNode = importNode.call(originalDocument, returnNode, true);\n        }\n        return returnNode;\n      }\n      let serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\n      /* Serialize doctype if allowed */\n      if (WHOLE_DOCUMENT && ALLOWED_TAGS['!doctype'] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {\n        serializedHTML = '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\\n' + serializedHTML;\n      }\n      /* Sanitize final string template-safe */\n      if (SAFE_FOR_TEMPLATES) {\n        arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {\n          serializedHTML = stringReplace(serializedHTML, expr, ' ');\n        });\n      }\n      return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;\n    };\n    DOMPurify.setConfig = function () {\n      let cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _parseConfig(cfg);\n      SET_CONFIG = true;\n    };\n    DOMPurify.clearConfig = function () {\n      CONFIG = null;\n      SET_CONFIG = false;\n    };\n    DOMPurify.isValidAttribute = function (tag, attr, value) {\n      /* Initialize shared config vars if necessary. */\n      if (!CONFIG) {\n        _parseConfig({});\n      }\n      const lcTag = transformCaseFunc(tag);\n      const lcName = transformCaseFunc(attr);\n      return _isValidAttribute(lcTag, lcName, value);\n    };\n    DOMPurify.addHook = function (entryPoint, hookFunction) {\n      if (typeof hookFunction !== 'function') {\n        return;\n      }\n      arrayPush(hooks[entryPoint], hookFunction);\n    };\n    DOMPurify.removeHook = function (entryPoint, hookFunction) {\n      if (hookFunction !== undefined) {\n        const index = arrayLastIndexOf(hooks[entryPoint], hookFunction);\n        return index === -1 ? undefined : arraySplice(hooks[entryPoint], index, 1)[0];\n      }\n      return arrayPop(hooks[entryPoint]);\n    };\n    DOMPurify.removeHooks = function (entryPoint) {\n      hooks[entryPoint] = [];\n    };\n    DOMPurify.removeAllHooks = function () {\n      hooks = _createHooksMap();\n    };\n    return DOMPurify;\n  }\n  var purify = createDOMPurify();\n\n  return purify;\n\n}));\n//# sourceMappingURL=purify.js.map\n","/**\n * Form handling functionality\n */\n\n/**\n * Sets up all form-related event handlers\n */\nexport function setupFormHandlers() {\n  // Setup the API endpoint\n  configureApiEndpoint();\n  \n  // Handle job description type toggle\n  setupJobDescriptionTypeToggle();\n  \n  // Handle form submission\n  setupFormValidation();\n  \n  // Handle copy button\n  setupCopyButton();\n}\n\n/**\n * Configures the API endpoint for form submission\n */\nfunction configureApiEndpoint() {\n  // Use a relative URL to hide the actual API domain\n  const apiEndpoint = '/api/generate_cover_letter';\n  \n  // Set the hx-post attribute to the API endpoint\n  document.getElementById('cover_letter_form').setAttribute('hx-post', apiEndpoint);\n  \n  // Log to confirm it's being set correctly\n  console.log('API endpoint set to:', apiEndpoint);\n}\n\n/**\n * Sets up the job description type toggle\n */\nfunction setupJobDescriptionTypeToggle() {\n  const radioButtons = document.querySelectorAll('input[name=\"job_desc_type\"]');\n  const textContainer = document.getElementById('job_desc_text_container');\n  const imageContainer = document.getElementById('job_desc_image_container');\n\n  // Initial state\n  toggleDescriptionType(radioButtons);\n\n  // Add event listeners\n  radioButtons.forEach(radio => {\n    radio.addEventListener('change', () => toggleDescriptionType(radioButtons));\n  });\n}\n\n/**\n * Toggle between text and image job description\n * @param {NodeList} radioButtons - The radio button elements\n */\nfunction toggleDescriptionType(radioButtons) {\n  const textContainer = document.getElementById('job_desc_text_container');\n  const imageContainer = document.getElementById('job_desc_image_container');\n  const textInput = document.getElementById('job_desc_text');\n  const imageInput = document.getElementById('job_desc_image');\n  \n  if (document.querySelector('input[name=\"job_desc_type\"]:checked').value === 'text') {\n    // Show text container, hide image container\n    textContainer.classList.remove('hidden');\n    imageContainer.classList.add('hidden');\n    \n    // Update required attributes\n    textInput.setAttribute('required', '');\n    imageInput.removeAttribute('required');\n  } else {\n    // Show image container, hide text container\n    textContainer.classList.add('hidden');\n    imageContainer.classList.remove('hidden');\n    \n    // Update required attributes\n    textInput.removeAttribute('required');\n    imageInput.setAttribute('required', '');\n  }\n}\n\n/**\n * Sets up form validation before submission\n */\nfunction setupFormValidation() {\n  const form = document.getElementById('cover_letter_form');\n  const generateButton = document.getElementById('generate_btn');\n  \n  // Prevent default form submission and handle it manually\n  form.addEventListener('submit', function(event) {\n    event.preventDefault();\n    \n    // Show loading indicator\n    document.getElementById('cover_letter_loading').classList.remove('hidden');\n    \n    // Set button to loading state\n    generateButton.classList.add('loading');\n    generateButton.disabled = true;\n    \n    // Get form data\n    const formData = new FormData(form);\n    \n    // Handle job description type - ensure only one type is sent\n    const jobDescType = document.querySelector('input[name=\"job_desc_type\"]:checked').value;\n    \n    if (jobDescType === 'text') {\n      // Text mode - ensure job_desc_image is empty\n      formData.delete('job_desc_image');\n      // Make sure job_desc_text is not empty\n      if (!formData.get('job_desc_text') || formData.get('job_desc_text').trim() === '') {\n        window.appUtils.showError('Please enter a job description text');\n        // Reset button state\n        generateButton.classList.remove('loading');\n        generateButton.disabled = false;\n        // Hide loading indicator\n        document.getElementById('cover_letter_loading').classList.add('hidden');\n        return;\n      }\n    } else {\n      // Image mode - ensure job_desc_text is empty\n      formData.set('job_desc_text', '');\n      \n      // Make sure job_desc_image is not empty\n      if (!formData.get('job_desc_image') || formData.get('job_desc_image').size === 0) {\n        window.appUtils.showError('Please upload a job description image');\n        // Reset button state\n        generateButton.classList.remove('loading');\n        generateButton.disabled = false;\n        // Hide loading indicator\n        document.getElementById('cover_letter_loading').classList.add('hidden');\n        return;\n      }\n    }\n    \n    // Validate form\n    const validation = window.appUtils.validateForm(formData);\n    \n    if (!validation.isValid) {\n      // Show error\n      window.appUtils.showError(validation.errorMessage);\n      // Hide loading indicator\n      document.getElementById('cover_letter_loading').classList.add('hidden');\n      // Reset button state\n      generateButton.classList.remove('loading');\n      generateButton.disabled = false;\n      return;\n    }\n    \n    // Use a relative URL to hide the actual API domain\n    const apiEndpoint = '/api/generate_cover_letter';\n    \n    // Submit form data directly using fetch\n    fetch(apiEndpoint, {\n      method: 'POST',\n      body: formData,\n    })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok: ' + response.status);\n      }\n      return response.text();\n    })\n    .then(data => {\n      // Update the editor with the generated cover letter\n      document.getElementById('cover_letter_editor').value = data;\n    })\n    .catch(error => {\n      window.appUtils.showError('Network error: ' + error.message);\n    })\n    .finally(() => {\n      // Hide loading indicator\n      document.getElementById('cover_letter_loading').classList.add('hidden');\n      // Reset button state\n      generateButton.classList.remove('loading');\n      generateButton.disabled = false;\n    });\n  });\n  \n  // We'll keep these event listeners for any HTMX fallback but they likely won't be used now\n  form.addEventListener('htmx:responseError', function(event) {\n    let errorMsg = 'Server error occurred. Please try again.';\n    \n    // Try to parse response as JSON for more specific error\n    try {\n      const response = JSON.parse(event.detail.xhr.responseText);\n      if (response.error) {\n        errorMsg = response.error;\n      }\n    } catch (e) {\n      // If we can't parse JSON, use the generic error\n    }\n    \n    window.appUtils.showError(errorMsg);\n  });\n  \n  form.addEventListener('htmx:sendError', function() {\n    window.appUtils.showError('Network error. Please check your internet connection and try again.');\n  });\n}\n\n/**\n * Sets up the copy button functionality\n */\nfunction setupCopyButton() {\n  const copyButton = document.getElementById('copy_btn');\n  \n  if (!copyButton) {\n    console.warn('Copy button element not found in the document');\n    return;\n  }\n  \n  copyButton.addEventListener('click', function() {\n    const coverLetterContent = document.getElementById('cover_letter_editor');\n    \n    if (coverLetterContent && coverLetterContent.value.trim() !== '') {\n      // Try to copy the text\n      try {\n        navigator.clipboard.writeText(coverLetterContent.value).then(() => {\n          // Flash the button to show success\n          this.classList.add('btn-success');\n          setTimeout(() => {\n            this.classList.remove('btn-success');\n          }, 1000);\n        }).catch(() => {\n          window.appUtils.showError('Failed to copy to clipboard');\n        });\n      } catch (error) {\n        // Fallback for older browsers\n        const textArea = document.createElement('textarea');\n        textArea.value = coverLetterContent.value;\n        textArea.style.position = 'fixed';\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        \n        try {\n          document.execCommand('copy');\n          this.classList.add('btn-success');\n          setTimeout(() => {\n            this.classList.remove('btn-success');\n          }, 1000);\n        } catch (err) {\n          window.appUtils.showError('Failed to copy to clipboard');\n        }\n        \n        document.body.removeChild(textArea);\n      }\n    }\n  });\n} "],"names":["$parcel$interopDefault","a","__esModule","default","$bebe1cbb5a309c8c$var$config","apiBaseUrl","version","features","debug","Object","freeze","$d349326c2b62c55f$exports","$820877bea407f5fe$export$d529ba4b6bdbcf0c","input","sanitize","ALLOWED_TAGS","ALLOWED_ATTR","trim","$820877bea407f5fe$export$c0fc46c8edd7094a","html","$820877bea407f5fe$export$3879b24e8245693d","message","elementId","errorElement","document","getElementById","textContent","classList","remove","setTimeout","add","console","error","$820877bea407f5fe$export$ed692cabb252e59b","formData","cvFile","get","size","isValid","errorMessage","jobDescText","jobDescImage","$0df1b74646f49493$var$toggleDescriptionType","radioButtons","textContainer","imageContainer","textInput","imageInput","querySelector","value","setAttribute","removeAttribute","factory","entries","setPrototypeOf","isFrozen","getPrototypeOf","getOwnPropertyDescriptor","seal","create","apply","construct","Reflect","x","fun","thisValue","args","Func","arrayForEach","unapply","Array","prototype","forEach","arrayLastIndexOf","lastIndexOf","arrayPop","pop","arrayPush","push","arraySplice","splice","stringToLowerCase","String","toLowerCase","stringToString","toString","stringMatch","match","stringReplace","replace","stringIndexOf","indexOf","stringTrim","objectHasOwnProperty","hasOwnProperty","regExpTest","RegExp","test","typeErrorCreate","func","TypeError","_len2","arguments","length","_key2","thisArg","_len","_key","addToSet","set","array","transformCaseFunc","undefined","l","element","lcElement","clone","object","newObject","property","isArray","cleanArray","index","constructor","lookupGetter","prop","desc","html$1","svg$1","svgFilters","svgDisallowed","mathMl$1","mathMlDisallowed","text","svg","mathMl","xml","MUSTACHE_EXPR","ERB_EXPR","TMPLIT_EXPR","DATA_ATTR","ARIA_ATTR","IS_ALLOWED_URI","IS_SCRIPT_OR_DATA","ATTR_WHITESPACE","DOCTYPE_NAME","EXPRESSIONS","__proto__","CUSTOM_ELEMENT","NODE_TYPE","progressingInstruction","comment","_createTrustedTypesPolicy","trustedTypes","purifyHostElement","createPolicy","suffix","ATTR_NAME","hasAttribute","getAttribute","policyName","createHTML","createScriptURL","scriptUrl","_","warn","_createHooksMap","afterSanitizeAttributes","afterSanitizeElements","afterSanitizeShadowDOM","beforeSanitizeAttributes","beforeSanitizeElements","beforeSanitizeShadowDOM","uponSanitizeAttribute","uponSanitizeElement","uponSanitizeShadowNode","createDOMPurify","trustedTypesPolicy","window1","window","DOMPurify","root","removed","nodeType","Element","isSupported","originalDocument","currentScript","DocumentFragment","HTMLTemplateElement","Node","NodeFilter","NamedNodeMap","MozNamedAttrMap","HTMLFormElement","DOMParser","ElementPrototype","cloneNode","getNextSibling","getChildNodes","getParentNode","template","createElement","content","ownerDocument","emptyHTML","implementation","createNodeIterator","createDocumentFragment","getElementsByTagName","importNode","hooks","createHTMLDocument","IS_ALLOWED_URI$1","DEFAULT_ALLOWED_TAGS","DEFAULT_ALLOWED_ATTR","CUSTOM_ELEMENT_HANDLING","tagNameCheck","writable","configurable","enumerable","attributeNameCheck","allowCustomizedBuiltInElements","FORBID_TAGS","FORBID_ATTR","ALLOW_ARIA_ATTR","ALLOW_DATA_ATTR","ALLOW_UNKNOWN_PROTOCOLS","ALLOW_SELF_CLOSE_IN_ATTR","SAFE_FOR_TEMPLATES","SAFE_FOR_XML","WHOLE_DOCUMENT","SET_CONFIG","FORCE_BODY","RETURN_DOM","RETURN_DOM_FRAGMENT","RETURN_TRUSTED_TYPE","SANITIZE_DOM","SANITIZE_NAMED_PROPS","KEEP_CONTENT","IN_PLACE","USE_PROFILES","FORBID_CONTENTS","DEFAULT_FORBID_CONTENTS","DATA_URI_TAGS","DEFAULT_DATA_URI_TAGS","URI_SAFE_ATTRIBUTES","DEFAULT_URI_SAFE_ATTRIBUTES","MATHML_NAMESPACE","SVG_NAMESPACE","HTML_NAMESPACE","NAMESPACE","IS_EMPTY_INPUT","ALLOWED_NAMESPACES","DEFAULT_ALLOWED_NAMESPACES","MATHML_TEXT_INTEGRATION_POINTS","HTML_INTEGRATION_POINTS","COMMON_SVG_AND_HTML_ELEMENTS","PARSER_MEDIA_TYPE","SUPPORTED_PARSER_MEDIA_TYPES","CONFIG","formElement","isRegexOrFunction","testValue","Function","_parseConfig","cfg","ADD_URI_SAFE_ATTR","ADD_DATA_URI_TAGS","ALLOWED_URI_REGEXP","ADD_TAGS","ADD_ATTR","table","tbody","TRUSTED_TYPES_POLICY","ALL_SVG_TAGS","ALL_MATHML_TAGS","_checkValidNamespace","parent","tagName","namespaceURI","parentTagName","Boolean","_forceRemove","node","removeChild","_removeAttribute","name","attribute","getAttributeNode","from","_initDocument","dirty","doc","leadingWhitespace","matches","dirtyPayload","parseFromString","documentElement","createDocument","innerHTML","body","insertBefore","createTextNode","childNodes","call","_createNodeIterator","SHOW_ELEMENT","SHOW_COMMENT","SHOW_TEXT","SHOW_PROCESSING_INSTRUCTION","SHOW_CDATA_SECTION","_isClobbered","nodeName","attributes","hasChildNodes","_isNode","_executeHooks","currentNode","data","hook","_sanitizeElements","allowedTags","firstElementChild","_isBasicCustomElement","parentNode","childCount","i","childClone","__removalCount","expr","_isValidAttribute","lcTag","lcName","_sanitizeAttributes","hookEvent","attrName","attrValue","keepAttr","allowedAttributes","forceKeepAttr","SANITIZE_NAMED_PROPS_PREFIX","getAttributeType","setAttributeNS","_sanitizeShadowDOM","fragment","shadowNode","shadowIterator","nextNode","importedNode","returnNode","appendChild","firstChild","nodeIterator","shadowroot","shadowrootmode","serializedHTML","outerHTML","doctype","setConfig","clearConfig","isValidAttribute","tag","attr","addHook","entryPoint","hookFunction","removeHook","removeHooks","removeAllHooks","addEventListener","log","appConfig","appUtils","sanitizeInput","sanitizeHtml","showError","validateForm","$0df1b74646f49493$var$configureApiEndpoint","apiEndpoint","$0df1b74646f49493$var$setupJobDescriptionTypeToggle","querySelectorAll","radio","$0df1b74646f49493$var$setupFormValidation","form","generateButton","event","preventDefault","disabled","FormData","jobDescType","delete","validation","fetch","method","then","response","ok","Error","status","catch","finally","errorMsg","JSON","parse","detail","xhr","responseText","e","$0df1b74646f49493$var$setupCopyButton","copyButton","coverLetterContent","navigator","clipboard","writeText","textArea","style","position","focus","select","execCommand","err"],"version":3,"file":"index.584f8570.js.map"}